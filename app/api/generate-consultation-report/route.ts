// app/api/generate-consultation-report/route.ts

import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// Types pour une meilleure structure
interface PatientData {
  nom?: string
  lastName?: string
  prenom?: string
  firstName?: string
  age?: number | string
  sexe?: string
  gender?: string
  dateNaissance?: string
  birthDate?: string
  telephone?: string
  phone?: string
  adresse?: string
  address?: string
  email?: string
  allergies?: string[]
  antecedents?: string[]
  medicalHistory?: string[]
}

interface Medication {
  medication?: string
  name?: string
  medicament?: string
  dosage?: string
  dose?: string
  frequency?: string
  posology?: string
  posologie?: string
  duration?: string
  duree?: string
  instructions?: string
  remarques?: string
  quantity?: string
  quantite?: string
}

interface Examination {
  name?: string
  type?: string
  examen?: string
  urgency?: string
  urgent?: boolean
  justification?: string
  indication?: string
  region?: string
  zone?: string
  details?: string
  remarques?: string
}

interface RequestBody {
  patientData: PatientData
  clinicalData: any
  questionsData?: any
  diagnosisData: any
  editedDocuments?: any
  includeFullPrescriptions?: boolean
}

export async function POST(request: NextRequest) {
  try {
    console.log("üìã G√©n√©ration du compte rendu m√©dical professionnel")
    
    // Parse et validation des donn√©es
    const body: RequestBody = await request.json()
    const { 
      patientData, 
      clinicalData, 
      questionsData, 
      diagnosisData,
      editedDocuments,
      includeFullPrescriptions = false
    } = body

    // Validation des donn√©es requises
    if (!patientData || !clinicalData || !diagnosisData) {
      return NextResponse.json(
        { success: false, error: "Donn√©es incompl√®tes" },
        { status: 400 }
      )
    }

    // Log d√©taill√© pour debug (limit√© pour √©viter la surcharge)
    console.log("üìä DONN√âES RE√áUES PAR L'API:")
    console.log("- Patient:", JSON.stringify(patientData, null, 2).substring(0, 500) + "...")
    console.log("- Clinical:", JSON.stringify(clinicalData, null, 2).substring(0, 500) + "...")
    console.log("- Diagnosis data pr√©sent:", !!diagnosisData)
    console.log("- EditedDocuments pr√©sent:", !!editedDocuments)

    // Pr√©paration du contexte m√©dical unifi√©
    console.log("üîß Pr√©paration du contexte m√©dical...")
    const medicalContext = prepareMedicalContext({
      patientData,
      clinicalData,
      questionsData,
      diagnosisData,
      editedDocuments
    })

    // G√©n√©ration du prompt structur√©
    console.log("‚úçÔ∏è G√©n√©ration du prompt...")
    let jsonTemplate: any
    let systemPrompt: string
    let userPrompt: string
    
    try {
      const promptData = generateProfessionalReportPrompt(medicalContext, patientData)
      jsonTemplate = promptData.template
      systemPrompt = promptData.systemPrompt
      userPrompt = promptData.userPrompt
    } catch (promptError) {
      console.error("‚ùå Erreur lors de la g√©n√©ration du prompt:", promptError)
      throw new Error(`Erreur de g√©n√©ration du prompt: ${promptError instanceof Error ? promptError.message : 'Erreur inconnue'}`)
    }

    console.log("ü§ñ G√©n√©ration du rapport avec GPT-4...")
    console.log("üìù Longueur du prompt:", userPrompt.length, "caract√®res")
    
    // G√©n√©ration avec retry et meilleure gestion d'erreur
    let reportData: any
    const maxRetries = 3
    let lastError: Error | null = null
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Tentative ${attempt}/${maxRetries}...`)
        
        const result = await generateText({
          model: openai("gpt-4o"),
          messages: [
            {
              role: 'system',
              content: systemPrompt
            },
            {
              role: 'user', 
              content: userPrompt
            }
          ],
          maxTokens: 8000, // R√©duit pour √©viter les timeouts
          temperature: 0.3,
        })

        console.log(`‚úÖ R√©ponse GPT-4 re√ßue (tentative ${attempt}), longueur: ${result.text.length} caract√®res`)
        
        // Parse et validation du rapport
        reportData = parseAndValidateReport(result.text)
        
        // Si on arrive ici, le parsing a r√©ussi
        break
        
      } catch (error) {
        lastError = error as Error
        console.error(`‚ùå Erreur tentative ${attempt}:`, error)
        
        if (attempt === maxRetries) {
          throw new Error(`√âchec apr√®s ${maxRetries} tentatives: ${lastError.message}`)
        }
        
        // Attendre un peu avant de r√©essayer
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt))
      }
    }
    
    // V√©rifier que les sections ne contiennent plus d'instructions
    reportData = cleanReportContent(reportData)
    
    // Enrichissement des m√©tadonn√©es
    reportData.metadata.wordCount = calculateWordCount(reportData.rapport)
    
    // V√©rifier la taille du rapport
    const reportSize = JSON.stringify(reportData).length
    console.log(`üìè Taille du rapport: ${reportSize} octets`)
    
    if (reportSize > 100000) {
      console.warn("‚ö†Ô∏è Rapport volumineux, optimisation n√©cessaire")
      // Optionnel : compresser ou paginer le rapport
    }
    
    // Gestion des prescriptions selon le format demand√©
    if (!includeFullPrescriptions) {
      reportData.prescriptionsSimplifiees = {
        examens: formatSimplifiedExamsPrescription(reportData),
        medicaments: formatSimplifiedMedicationsPrescription(reportData)
      }
      delete reportData.prescriptions
    }

    // Log final des prescriptions g√©n√©r√©es
    console.log("‚úÖ PRESCRIPTIONS FINALES G√âN√âR√âES:")
    console.log("- M√©dicaments:", reportData.prescriptions?.medicaments?.items?.length || 0)
    console.log("- Examens bio:", reportData.prescriptions?.biologie?.examens?.length || 0)
    console.log("- Examens imagerie:", reportData.prescriptions?.imagerie?.examens?.length || 0)

    return NextResponse.json({
      success: true,
      report: reportData,
      metadata: {
        type: "professional_narrative",
        includesFullPrescriptions: includeFullPrescriptions,
        generatedAt: new Date().toISOString(),
        reportSize: reportSize
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration du rapport:", error)
    
    const errorMessage = error instanceof Error ? error.message : "Erreur inconnue"
    const statusCode = error instanceof SyntaxError ? 422 : 500
    
    return NextResponse.json(
      { 
        success: false, 
        error: errorMessage,
        details: process.env.NODE_ENV === 'development' ? error : undefined
      },
      { status: statusCode }
    )
  }
}

// Fonction am√©lior√©e pour nettoyer le contenu du rapport
function cleanReportContent(report: any): any {
  if (!report.rapport) return report
  
  for (const [key, value] of Object.entries(report.rapport)) {
    if (typeof value === 'string') {
      // V√©rifier si le texte contient encore des instructions
      if (value.includes('[REMPLACER PAR') || value.includes('REMPLACER PAR') || value.includes('G√âN√âRER_PARAGRAPHE')) {
        console.warn(`‚ö†Ô∏è Section "${key}" contient encore des instructions`)
        // G√©n√©rer un contenu par d√©faut bas√© sur la section
        report.rapport[key] = generateDefaultContent(key)
      }
    }
  }
  
  return report
}

// G√©n√©rer du contenu par d√©faut si GPT-4 n'a pas remplac√© les instructions
function generateDefaultContent(sectionName: string): string {
  const defaults: Record<string, string> = {
    motifConsultation: "Le patient consulte ce jour pour les sympt√¥mes d√©crits. La consultation a √©t√© r√©alis√©e dans le cadre d'une t√©l√©consultation m√©dicale.",
    anamnese: "L'anamn√®se r√©v√®le les √©l√©ments cliniques pr√©sent√©s par le patient. L'histoire de la maladie actuelle est document√©e selon les informations fournies lors de la consultation.",
    antecedents: "Les ant√©c√©dents m√©dicaux et chirurgicaux du patient ont √©t√© recueillis. Les allergies et traitements en cours sont document√©s.",
    examenClinique: "L'examen clinique a √©t√© adapt√© au contexte de t√©l√©consultation. Les constantes vitales et observations disponibles ont √©t√© prises en compte.",
    syntheseDiagnostique: "La synth√®se diagnostique est bas√©e sur l'ensemble des √©l√©ments cliniques recueillis. Le raisonnement m√©dical a conduit aux hypoth√®ses diagnostiques retenues.",
    conclusionDiagnostique: "Le diagnostic principal a √©t√© √©tabli sur la base des crit√®res cliniques. Les diagnostics diff√©rentiels ont √©t√© consid√©r√©s.",
    priseEnCharge: "La prise en charge th√©rapeutique comprend les prescriptions m√©dicamenteuses et les examens compl√©mentaires jug√©s n√©cessaires.",
    surveillance: "Les modalit√©s de surveillance et de suivi ont √©t√© d√©finies. Les signes d'alerte ont √©t√© expliqu√©s au patient.",
    conclusion: "Cette consultation a permis d'√©tablir un diagnostic et de proposer une prise en charge adapt√©e. Un suivi est pr√©vu selon les modalit√©s d√©finies."
  }
  
  return defaults[sectionName] || "Section √† compl√©ter."
}

// Fonction optimis√©e pour trouver les m√©dicaments
function findMedications(data: any): Medication[] {
  const medications: Medication[] = []
  const uniqueMeds = new Set<string>()
  
  // Chemins sp√©cifiques o√π chercher
  const paths = [
    data.editedDocuments?.medication?.prescriptions,
    data.editedDocuments?.medicaments?.items,
    data.diagnosis?.mauritianDocuments?.medication?.prescriptions,
    data.diagnosis?.mauritianDocuments?.consultation?.management_plan?.treatment?.medications,
    data.diagnosis?.expertAnalysis?.expert_therapeutics?.primary_treatments,
    data.diagnosis?.completeData?.mauritianDocuments?.medication?.prescriptions
  ]
  
  paths.forEach(path => {
    if (Array.isArray(path)) {
      path.forEach((med: any) => {
        const medName = med.medication?.fr || med.medication || med.drug?.fr || med.name || med.medicament || ''
        const medKey = medName.toLowerCase().trim()
        
        if (medName && !uniqueMeds.has(medKey)) {
          uniqueMeds.add(medKey)
          medications.push({
            medication: medName,
            name: medName,
            dosage: med.dosage || med.dosing?.adult?.fr || '',
            frequency: med.frequency || med.posology || med.dosing?.adult?.fr || '',
            duration: med.duration?.fr || med.duration || '',
            instructions: med.instructions?.fr || med.instructions || med.remarques || ''
          })
        }
      })
    }
  })
  
  console.log(`‚úì ${medications.length} m√©dicaments uniques trouv√©s`)
  return medications
}

// Fonction optimis√©e pour trouver les examens biologiques
function findExamsBio(data: any): Examination[] {
  const examsBio: Examination[] = []
  const uniqueExams = new Set<string>()
  
  // Chemins sp√©cifiques o√π chercher les examens bio
  const paths = [
    data.editedDocuments?.biological?.examinations,
    data.editedDocuments?.biologie?.examens,
    data.diagnosis?.mauritianDocuments?.biological?.examinations,
    data.diagnosis?.mauritianDocuments?.consultation?.management_plan?.investigations?.laboratory_tests,
    data.diagnosis?.expertAnalysis?.expert_investigations?.investigation_strategy?.laboratory_tests,
    data.diagnosis?.completeData?.mauritianDocuments?.biological?.examinations
  ]
  
  // Parcourir uniquement les chemins pertinents
  paths.forEach(path => {
    if (Array.isArray(path)) {
      path.forEach((exam: any) => {
        const examName = exam.test_name?.fr || exam.test?.fr || exam.name || exam.type || exam.examen || ''
        const examKey = examName.toLowerCase().trim()
        
        // √âviter les doublons
        if (examName && !uniqueExams.has(examKey)) {
          uniqueExams.add(examKey)
          examsBio.push({
            name: examName,
            type: exam.type || examName,
            urgency: exam.urgency || 'Normal',
            justification: exam.justification?.fr || exam.clinical_justification?.fr || exam.indication || ''
          })
        }
      })
    }
  })
  
  console.log(`‚úì ${examsBio.length} examens biologiques uniques trouv√©s`)
  return examsBio
}

// Fonction optimis√©e pour trouver les examens d'imagerie
function findImagingExams(data: any): Examination[] {
  const examsImaging: Examination[] = []
  const uniqueExams = new Set<string>()
  
  const paths = [
    data.editedDocuments?.imaging?.studies,
    data.editedDocuments?.imagerie?.examens,
    data.diagnosis?.mauritianDocuments?.imaging?.studies,
    data.diagnosis?.mauritianDocuments?.consultation?.management_plan?.investigations?.imaging_studies,
    data.diagnosis?.expertAnalysis?.expert_investigations?.investigation_strategy?.imaging_studies,
    data.diagnosis?.completeData?.mauritianDocuments?.imaging?.studies
  ]
  
  paths.forEach(path => {
    if (Array.isArray(path)) {
      path.forEach((exam: any) => {
        const examName = exam.study_name?.fr || exam.type || exam.name || exam.examen || ''
        const examKey = examName.toLowerCase().trim()
        
        if (examName && !uniqueExams.has(examKey)) {
          uniqueExams.add(examKey)
          examsImaging.push({
            type: examName,
            region: exam.region || detectAnatomicalRegion(examName),
            indication: exam.indication?.fr || exam.indication || '',
            urgency: exam.urgency || 'Normal',
            details: exam.findings_sought?.fr || exam.details || exam.remarques || ''
          })
        }
      })
    }
  })
  
  console.log(`‚úì ${examsImaging.length} examens d'imagerie uniques trouv√©s`)
  return examsImaging
}

// Fonction pour pr√©parer le contexte m√©dical unifi√©
function prepareMedicalContext(data: {
  patientData: PatientData
  clinicalData: any
  questionsData?: any
  diagnosisData: any
  editedDocuments?: any
}) {
  // Normalisation des donn√©es patient
  const normalizedPatient = {
    nom: data.patientData.nom || data.patientData.lastName || '',
    prenom: data.patientData.prenom || data.patientData.firstName || '',
    age: data.patientData.age || '',
    sexe: data.patientData.sexe || data.patientData.gender || 'Non renseign√©',
    dateNaissance: data.patientData.dateNaissance || data.patientData.birthDate || '',
    telephone: data.patientData.telephone || data.patientData.phone || '',
    adresse: data.patientData.adresse || data.patientData.address || '',
    email: data.patientData.email || '',
    allergies: Array.isArray(data.patientData.allergies) ? data.patientData.allergies :
               Array.isArray(data.patientData.medicalHistory?.allergies) ? data.patientData.medicalHistory.allergies : [],
    antecedents: Array.isArray(data.patientData.antecedents) ? data.patientData.antecedents :
                 Array.isArray(data.patientData.medicalHistory) ? data.patientData.medicalHistory : []
  }

  return {
    patient: normalizedPatient,
    clinical: data.clinicalData,
    aiQuestions: data.questionsData?.responses || [],
    diagnosis: data.diagnosisData,
    editedDocuments: data.editedDocuments || {}
  }
}

// Fonction am√©lior√©e pour g√©n√©rer le prompt structur√©
function generateProfessionalReportPrompt(medicalContext: any, patientData: PatientData) {
  try {
    const patientId = `${patientData.nom || patientData.lastName || 'PATIENT'}_${Date.now()}`
    
    // Extraire les informations pertinentes du contexte
    const motifConsultation = medicalContext.clinical?.chiefComplaint || 
                            (Array.isArray(medicalContext.clinical?.symptoms) ? medicalContext.clinical.symptoms.join(', ') : medicalContext.clinical?.symptoms) || 
                            medicalContext.diagnosis?.chiefComplaint ||
                            medicalContext.diagnosis?.reason ||
                            "Consultation m√©dicale"
    
    const symptomes = Array.isArray(medicalContext.clinical?.symptoms) ? medicalContext.clinical.symptoms :
                     Array.isArray(medicalContext.diagnosis?.symptoms) ? medicalContext.diagnosis.symptoms :
                     Array.isArray(medicalContext.clinical?.presentingComplaints) ? medicalContext.clinical.presentingComplaints : []
    
    const vitalSigns = medicalContext.clinical?.vitalSigns || 
                      medicalContext.clinical?.vitals || 
                      medicalContext.diagnosis?.vitalSigns || {}
    
    const examenPhysique = medicalContext.clinical?.physicalExam || 
                          medicalContext.clinical?.examination ||
                          medicalContext.diagnosis?.physicalExamination || 
                          medicalContext.diagnosis?.clinicalExamination || {}
    
    // Donn√©es du diagnostic (extraction am√©lior√©e)
    const diagnosticData = medicalContext.diagnosis?.diagnosis || 
                          medicalContext.diagnosis?.completeData?.diagnosis || 
                          medicalContext.diagnosis
    
    let diagnosticPrincipal = ""
    
    // Extraction du diagnostic principal
    if (typeof diagnosticData === 'object' && diagnosticData.primary) {
      diagnosticPrincipal = diagnosticData.primary.condition || 
                           diagnosticData.primary.condition_bilingual?.fr || 
                           ""
    } else {
      diagnosticPrincipal = medicalContext.diagnosis?.primaryDiagnosis || 
                           medicalContext.diagnosis?.mainDiagnosis ||
                           medicalContext.diagnosis?.principal ||
                           medicalContext.diagnosis?.diagnosticHypothesis?.primary || 
                           (typeof medicalContext.diagnosis === 'string' ? medicalContext.diagnosis : "") ||
                           ""
    }
    
    const diagnosticsSecondaires = Array.isArray(medicalContext.diagnosis?.secondaryDiagnoses) ? medicalContext.diagnosis.secondaryDiagnoses :
                                   Array.isArray(medicalContext.diagnosis?.diagnosticHypothesis?.secondary) ? medicalContext.diagnosis.diagnosticHypothesis.secondary :
                                   Array.isArray(diagnosticData?.differential) ? diagnosticData.differential.map((d: any) => d.condition?.fr || d.condition) : []
    
    const examensRealises = Array.isArray(medicalContext.diagnosis?.performedExams) ? medicalContext.diagnosis.performedExams :
                           Array.isArray(medicalContext.diagnosis?.examsPerformed) ? medicalContext.diagnosis.examsPerformed : []
    
    const analyseDiagnostique = medicalContext.diagnosis?.analysis || 
                               medicalContext.diagnosis?.clinicalAnalysis || 
                               medicalContext.diagnosis?.diagnosticAnalysis || 
                               diagnosticData?.primary?.clinicalRationale || ""
    
    // EXTRACTION OPTIMIS√âE DES PRESCRIPTIONS
    console.log("üîç RECHERCHE DES PRESCRIPTIONS...")
    
    // 1. Recherche des m√©dicaments
    console.log("üíä Recherche des m√©dicaments...")
    let medicaments = findMedications({ editedDocuments: medicalContext.editedDocuments, diagnosis: medicalContext.diagnosis })
    
    // 2. Recherche des examens biologiques
    console.log("üî¨ Recherche des examens biologiques...")
    let examsBio = findExamsBio({ editedDocuments: medicalContext.editedDocuments, diagnosis: medicalContext.diagnosis })
    
    // 3. Recherche des examens d'imagerie
    console.log("üè• Recherche des examens d'imagerie...")
    let examsImaging = findImagingExams({ editedDocuments: medicalContext.editedDocuments, diagnosis: medicalContext.diagnosis })
    
    // G√âN√âRATION AUTOMATIQUE SI AUCUNE PRESCRIPTION (avec limites)
    if (medicaments.length === 0 && diagnosticPrincipal) {
      console.log("‚ö†Ô∏è Aucun m√©dicament trouv√©, g√©n√©ration bas√©e sur le diagnostic...")
      medicaments = generateMedicationsFromDiagnosis(diagnosticPrincipal).slice(0, 3) // Max 3
    }
    
    if (examsBio.length === 0) {
      console.log("‚ö†Ô∏è Aucun examen biologique trouv√©, g√©n√©ration d'un bilan minimal...")
      examsBio = generateStandardBiologyExams(diagnosticPrincipal, medicalContext.patient.age).slice(0, 5) // Max 5
    }
    
    if (examsImaging.length === 0 && shouldHaveImaging(diagnosticPrincipal)) {
      console.log("‚ö†Ô∏è Aucun examen d'imagerie trouv√©, g√©n√©ration bas√©e sur le diagnostic...")
      examsImaging = generateImagingFromDiagnosis(diagnosticPrincipal).slice(0, 2) // Max 2
    }
    
    // Log final
    console.log("üìä R√âSUM√â DES PRESCRIPTIONS √Ä INCLURE:")
    console.log(`- ${medicaments.length} m√©dicaments`)
    console.log(`- ${examsBio.length} examens biologiques`)
    console.log(`- ${examsImaging.length} examens d'imagerie`)
    
    // Extraire des informations suppl√©mentaires des questions/r√©ponses IA
    let aiInsights = ""
    if (medicalContext.aiQuestions && medicalContext.aiQuestions.length > 0) {
      aiInsights = medicalContext.aiQuestions.map((q: any) => 
        `${q.question || ''}: ${q.answer || q.response || ''}`
      ).join('. ')
    }
    
    // Cr√©er le template JSON avec du contenu r√©el
    const jsonTemplate = {
      header: {
        title: "COMPTE-RENDU DE CONSULTATION M√âDICALE",
        subtitle: "Document m√©dical confidentiel",
        reference: `CR-${patientId}`
      },
      
      identification: {
        patient: formatPatientName(medicalContext.patient),
        age: `${medicalContext.patient.age} ans`,
        sexe: medicalContext.patient.sexe,
        dateNaissance: formatDate(medicalContext.patient.dateNaissance),
        adresse: medicalContext.patient.adresse || 'Non renseign√©e',
        telephone: medicalContext.patient.telephone || 'Non renseign√©',
        email: medicalContext.patient.email || 'Non renseign√©'
      },
      
      rapport: {
        motifConsultation: "G√âN√âRER_PARAGRAPHE_150_200_MOTS",
        anamnese: "G√âN√âRER_PARAGRAPHE_300_400_MOTS",
        antecedents: "G√âN√âRER_PARAGRAPHE_200_250_MOTS",
        examenClinique: "G√âN√âRER_PARAGRAPHE_350_450_MOTS",
        syntheseDiagnostique: "G√âN√âRER_PARAGRAPHE_300_400_MOTS",
        conclusionDiagnostique: "G√âN√âRER_PARAGRAPHE_150_200_MOTS",
        priseEnCharge: "G√âN√âRER_PARAGRAPHE_250_350_MOTS",
        surveillance: "G√âN√âRER_PARAGRAPHE_200_250_MOTS",
        conclusion: "G√âN√âRER_PARAGRAPHE_150_200_MOTS"
      },
      
      prescriptions: {
        medicaments: {
          items: medicaments.map((med: Medication) => ({
            nom: med.medication || med.name || '',
            dci: extractDCI(med.medication || med.name || ''),
            dosage: med.dosage || '',
            forme: detectMedicationForm(med.medication || med.name || ''),
            posologie: med.frequency || med.posology || '',
            duree: med.duration || '',
            quantite: calculateQuantity(med),
            remarques: med.instructions || '',
            nonSubstituable: false
          })),
          renouvellement: shouldAllowRenewal(medicalContext.diagnosis),
          dateValidite: getValidityDate()
        },
        biologie: {
          examens: examsBio.map((exam: Examination) => ({
            type: exam.name || exam.type || '',
            code: getBiologyCode(exam.name || exam.type || ''),
            urgence: exam.urgency === 'Urgent' || exam.urgency === 'STAT',
            jeun: requiresFasting(exam.name || exam.type || ''),
            remarques: exam.justification || ''
          })),
          laboratoireRecommande: "Laboratoire d'analyses m√©dicales agr√©√©"
        },
        imagerie: {
          examens: examsImaging.map((exam: Examination) => ({
            type: exam.type || '',
            region: exam.region || detectAnatomicalRegion(exam.type || ''),
            indication: exam.indication || exam.justification || '',
            urgence: exam.urgency === 'Urgent' || exam.urgency === 'STAT',
            contraste: requiresContrast(exam.type || ''),
            remarques: exam.details || ''
          })),
          centreRecommande: "Centre d'imagerie m√©dicale"
        }
      },
      
      signature: {
        medecin: "Dr. [NOM DU M√âDECIN]",
        qualification: "M√©decin G√©n√©raliste",
        rpps: "[NUM√âRO RPPS]",
        etablissement: "Cabinet M√©dical"
      },
      
      metadata: {
        dateGeneration: new Date().toISOString(),
        wordCount: 0
      }
    }
    
    // Prompts s√©par√©s pour meilleur contr√¥le
    const systemPrompt = `Tu es un m√©decin senior exp√©riment√© qui g√©n√®re des comptes rendus m√©dicaux.

R√àGLES ABSOLUES:
1. Tu DOIS r√©pondre UNIQUEMENT avec un objet JSON valide
2. PAS de texte avant ou apr√®s le JSON
3. PAS de backticks ou de formatage markdown
4. PAS d'explication ou de commentaire
5. Commence directement par { et termine par }
6. Le JSON doit √™tre valide et parsable

Dans la section "rapport", tu DOIS:
- Remplacer CHAQUE "G√âN√âRER_PARAGRAPHE_XXX_MOTS" par un vrai paragraphe m√©dical
- Respecter les longueurs demand√©es (nombre de mots)
- Utiliser un vocabulaire m√©dical professionnel
- √ätre coh√©rent avec les donn√©es du patient
- NE PAS laisser d'instructions dans le texte final

IMPORTANT: Ne modifie JAMAIS les sections "prescriptions", garde-les exactement comme fournies.`

    const userPrompt = `Voici les donn√©es pour g√©n√©rer le compte rendu:

PATIENT:
- Nom: ${formatPatientName(medicalContext.patient)}
- √Çge: ${medicalContext.patient.age} ans
- Sexe: ${medicalContext.patient.sexe}
- Ant√©c√©dents: ${JSON.stringify(medicalContext.patient.antecedents)}
- Allergies: ${JSON.stringify(medicalContext.patient.allergies)}

CONSULTATION:
- Motif: ${motifConsultation}
- Sympt√¥mes: ${JSON.stringify(symptomes)}
- Signes vitaux: ${JSON.stringify(vitalSigns)}
- Examen physique: ${JSON.stringify(examenPhysique)}

DIAGNOSTIC:
- Principal: ${diagnosticPrincipal}
- Secondaires: ${JSON.stringify(diagnosticsSecondaires)}
- Analyse: ${analyseDiagnostique}

${aiInsights ? `INFORMATIONS COMPL√âMENTAIRES: ${aiInsights}` : ''}

G√©n√®re le JSON complet en rempla√ßant tous les "G√âN√âRER_PARAGRAPHE_XXX_MOTS" par du contenu m√©dical r√©el et pertinent. 
Assure-toi que chaque paragraphe respecte la longueur demand√©e.

${JSON.stringify(jsonTemplate, null, 2)}`

    return {
      template: jsonTemplate,
      systemPrompt,
      userPrompt
    }
  } catch (error) {
    console.error("‚ùå Erreur dans generateProfessionalReportPrompt:", error)
    throw error
  }
}

// Fonction am√©lior√©e de parsing avec meilleure gestion d'erreur
function parseAndValidateReport(responseText: string): any {
  try {
    console.log("üîç D√©but du parsing de la r√©ponse GPT-4...")
    
    // Si la r√©ponse est trop courte, c'est probablement une erreur
    if (responseText.length < 100) {
      console.error("‚ùå R√©ponse trop courte:", responseText)
      throw new Error("La r√©ponse de GPT-4 est trop courte pour √™tre un rapport valide")
    }
    
    let cleanedResponse = responseText.trim()
    
    // Log des premiers caract√®res pour debug
    console.log("üìù Premiers caract√®res de la r√©ponse:", cleanedResponse.substring(0, 100))
    
    // V√©rifier si la r√©ponse commence par du texte au lieu de JSON
    if (!cleanedResponse.startsWith('{') && !cleanedResponse.includes('{')) {
      console.error("‚ùå La r√©ponse ne contient pas de JSON:", cleanedResponse.substring(0, 200))
      throw new Error("GPT-4 n'a pas retourn√© de JSON valide")
    }
    
    // Essayer d'extraire le JSON m√™me s'il y a du texte avant/apr√®s
    const jsonStart = cleanedResponse.indexOf('{')
    const jsonEnd = cleanedResponse.lastIndexOf('}')
    
    if (jsonStart === -1 || jsonEnd === -1 || jsonStart >= jsonEnd) {
      throw new Error('Aucun JSON valide trouv√© dans la r√©ponse')
    }
    
    cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd + 1)
    
    // Supprimer les backticks s'il y en a
    cleanedResponse = cleanedResponse.replace(/^```(?:json)?\s*/i, '')
    cleanedResponse = cleanedResponse.replace(/\s*```$/i, '')
    
    // Parser le JSON
    let parsed: any
    try {
      parsed = JSON.parse(cleanedResponse)
    } catch (parseError) {
      console.error("‚ùå Erreur de parsing JSON:", parseError)
      console.error("üìù JSON √† parser (premiers 500 car.):", cleanedResponse.substring(0, 500))
      throw new Error('Impossible de parser le JSON')
    }
    
    // Validation de la structure
    if (!parsed.header || !parsed.identification || !parsed.rapport) {
      console.error("‚ùå Structure invalide:", Object.keys(parsed))
      throw new Error('Structure du rapport invalide: sections manquantes')
    }
    
    // V√©rifier que les sections ont √©t√© g√©n√©r√©es
    const rapportSections = ['motifConsultation', 'anamnese', 'antecedents', 'examenClinique', 
                            'syntheseDiagnostique', 'conclusionDiagnostique', 'priseEnCharge', 
                            'surveillance', 'conclusion']
    
    for (const section of rapportSections) {
      if (!parsed.rapport[section] || parsed.rapport[section].includes('G√âN√âRER_PARAGRAPHE')) {
        console.warn(`‚ö†Ô∏è Section non g√©n√©r√©e: ${section}`)
        // Remplacer par un contenu par d√©faut
        parsed.rapport[section] = generateDefaultContent(section)
      }
    }
    
    console.log("‚úÖ Parsing r√©ussi!")
    return parsed
    
  } catch (error) {
    console.error('‚ùå Erreur compl√®te de parsing:', error)
    throw error
  }
}

// Fonctions de g√©n√©ration automatique de prescriptions (limit√©es)
function generateMedicationsFromDiagnosis(diagnosis: any): Medication[] {
  // Convertir le diagnosis en string s'il s'agit d'un objet
  let diagText = ''
  
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis,
      diagnosis.detailedAnalysis
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const medications: Medication[] = []
  
  // Infections
  if (diag.includes('infection') || diag.includes('angine') || diag.includes('otite') || 
      diag.includes('sinusite') || diag.includes('bronchite') || diag.includes('pneumonie')) {
    medications.push({
      medication: "Amoxicilline",
      dosage: "1g",
      frequency: "2 fois par jour",
      duration: "7 jours",
      instructions: "√Ä prendre au milieu du repas"
    })
  }
  
  // Douleur/Fi√®vre
  if (diag.includes('douleur') || diag.includes('fi√®vre') || diag.includes('c√©phal√©e') || 
      diag.includes('migraine')) {
    medications.push({
      medication: "Parac√©tamol",
      dosage: "1g",
      frequency: "3 fois par jour si douleur",
      duration: "5 jours",
      instructions: "Maximum 3g par jour. Espacer de 6 heures minimum"
    })
  }
  
  // Inflammation
  if (diag.includes('inflamm') || diag.includes('arthrite') || diag.includes('tendinite')) {
    medications.push({
      medication: "Ibuprof√®ne",
      dosage: "400mg",
      frequency: "3 fois par jour",
      duration: "5 jours",
      instructions: "Pendant les repas. Contre-indiqu√© si ulc√®re"
    })
  }
  
  // Si aucun m√©dicament sp√©cifique, ajouter un antalgique de base
  if (medications.length === 0) {
    medications.push({
      medication: "Parac√©tamol",
      dosage: "500mg",
      frequency: "Si besoin, jusqu'√† 3 fois par jour",
      duration: "Selon besoin",
      instructions: "Maximum 3g par jour"
    })
  }
  
  return medications
}

function generateStandardBiologyExams(diagnosis: any, age: any): Examination[] {
  const exams: Examination[] = [
    {
      name: "NFS (Num√©ration Formule Sanguine)",
      urgency: "Normal",
      justification: "Bilan de base, recherche d'anomalies h√©matologiques"
    }
  ]
  
  // Convertir le diagnosis en string
  let diagText = ''
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const patientAge = parseInt(String(age)) || 0
  
  // Marqueurs inflammatoires
  if (diag.includes('inflam') || diag.includes('infection') || diag.includes('fi√®vre')) {
    exams.push({
      name: "CRP (Prot√©ine C-R√©active)",
      urgency: "Normal",
      justification: "Recherche de syndrome inflammatoire"
    })
  }
  
  // Bilan r√©nal/h√©patique si > 50 ans ou certaines pathologies
  if (patientAge > 50 || diag.includes('hypertension') || diag.includes('diab√®te')) {
    exams.push({
      name: "Cr√©atinine avec DFG",
      urgency: "Normal",
      justification: "√âvaluation de la fonction r√©nale"
    })
  }
  
  // Glyc√©mie
  if (diag.includes('diab√®te') || patientAge > 45) {
    exams.push({
      name: "Glyc√©mie √† jeun",
      urgency: "Normal",
      justification: "D√©pistage ou suivi diab√©tique"
    })
  }
  
  return exams
}

function shouldHaveImaging(diagnosis: any): boolean {
  // Convertir le diagnosis en string s'il s'agit d'un objet
  let diagText = ''
  
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    // Extraire le texte de toutes les propri√©t√©s possibles
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis,
      diagnosis.detailedAnalysis,
      diagnosis.clinicalRationale
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const imagingKeywords = [
    'thorax', 'poumon', 'pneumonie', 'bronchite', 'toux', 'essouflement',
    'abdomen', 'ventre', 'douleur abdominale',
    'trauma', 'fracture', 'entorse',
    'c√©phal√©e', 'migraine', 'vertige',
    'rachis', 'lombalgie', 'dorsalgie'
  ]
  
  return imagingKeywords.some(keyword => diag.includes(keyword))
}

function generateImagingFromDiagnosis(diagnosis: any): Examination[] {
  // Convertir le diagnosis en string
  let diagText = ''
  if (typeof diagnosis === 'string') {
    diagText = diagnosis
  } else if (diagnosis && typeof diagnosis === 'object') {
    diagText = [
      diagnosis.condition,
      diagnosis.primary?.condition,
      diagnosis.diagnosis
    ].filter(Boolean).join(' ')
  }
  
  const diag = diagText.toLowerCase()
  const exams: Examination[] = []
  
  // Pathologies thoraciques
  if (diag.includes('thorax') || diag.includes('poumon') || diag.includes('toux') || 
      diag.includes('dyspn√©e') || diag.includes('pneumonie') || diag.includes('essouflement')) {
    exams.push({
      type: "Radiographie thoracique",
      region: "Thorax",
      indication: "Recherche de pathologie pulmonaire",
      urgency: "Normal"
    })
  }
  
  return exams
}

// Fonctions utilitaires
function formatPatientName(patient: any): string {
  const nom = (patient.nom || patient.lastName || '').toUpperCase()
  const prenom = (patient.prenom || patient.firstName || '')
  const fullName = `${nom} ${prenom}`.trim()
  return fullName || 'PATIENT'
}

function formatDate(dateValue: any): string {
  if (!dateValue) return 'Non renseign√©e'
  
  try {
    const dateString = String(dateValue)
    if (dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
      return dateString
    }
    
    const date = new Date(dateValue)
    if (isNaN(date.getTime())) {
      return dateString
    }
    
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  } catch {
    return String(dateValue)
  }
}

function extractDCI(medicationName: any): string {
  const name = String(medicationName || '')
  if (!name) return '√Ä pr√©ciser'
  
  const commonDCIs: Record<string, string> = {
    'doliprane': 'Parac√©tamol',
    'efferalgan': 'Parac√©tamol',
    'dafalgan': 'Parac√©tamol',
    'advil': 'Ibuprof√®ne',
    'nurofen': 'Ibuprof√®ne',
    'augmentin': 'Amoxicilline + Acide clavulanique',
    'clamoxyl': 'Amoxicilline',
    'amoxicilline': 'Amoxicilline',
    'ventoline': 'Salbutamol',
    'spasfon': 'Phloroglucinol',
    'levothyrox': 'L√©vothyroxine',
    'kardegic': 'Acide ac√©tylsalicylique',
    'xarelto': 'Rivaroxaban',
    'metformine': 'Metformine',
    'ramipril': 'Ramipril',
    'lexomil': 'Bromaz√©pam',
    'xanax': 'Alprazolam',
    'inexium': 'Esom√©prazole',
    'omeprazole': 'Om√©prazole'
  }
  
  const lowerName = name.toLowerCase()
  
  for (const [brand, dci] of Object.entries(commonDCIs)) {
    if (lowerName === brand || lowerName.startsWith(brand + ' ')) return dci
  }
  
  for (const [brand, dci] of Object.entries(commonDCIs)) {
    if (lowerName.includes(brand)) return dci
  }
  
  return name
}

function detectMedicationForm(name: any): string {
  const lowerName = String(name || '').toLowerCase()
  if (!lowerName) return 'comprim√©'
  
  if (lowerName.includes('sirop')) return 'sirop'
  if (lowerName.includes('g√©lule')) return 'g√©lule'
  if (lowerName.includes('comprim√© effervescent')) return 'comprim√© effervescent'
  if (lowerName.includes('comprim√© orodispersible')) return 'comprim√© orodispersible'
  if (lowerName.includes('sachet')) return 'poudre en sachet'
  if (lowerName.includes('injectable')) return 'solution injectable'
  if (lowerName.includes('cr√®me')) return 'cr√®me'
  if (lowerName.includes('pommade')) return 'pommade'
  if (lowerName.includes('gel')) return 'gel'
  if (lowerName.includes('collyre')) return 'collyre'
  if (lowerName.includes('spray')) return 'spray'
  if (lowerName.includes('suppositoire')) return 'suppositoire'
  if (lowerName.includes('patch')) return 'patch transdermique'
  if (lowerName.includes('gouttes')) return 'solution en gouttes'
  
  return 'comprim√©'
}

function calculateQuantity(med: Medication): string {
  const duration = String(med.duration || '')
  const frequency = String(med.frequency || med.posology || '')
  
  const daysMatch = duration.match(/(\d+)\s*(jours?|days?|semaines?|weeks?|mois|months?)/i)
  let days = 0
  
  if (daysMatch) {
    days = parseInt(daysMatch[1])
    if (duration.includes('semaine') || duration.includes('week')) {
      days *= 7
    } else if (duration.includes('mois') || duration.includes('month')) {
      days *= 30
    }
  }
  
  let dailyDoses = 1
  const freqMatch = frequency.match(/(\d+)\s*fois/i)
  if (freqMatch) {
    dailyDoses = parseInt(freqMatch[1])
  } else if (frequency.includes('matin et soir')) {
    dailyDoses = 2
  } else if (frequency.includes('matin, midi et soir')) {
    dailyDoses = 3
  }
  
  const totalDoses = days * dailyDoses
  
  if (totalDoses > 0) {
    if (totalDoses <= 30) return '1 bo√Æte'
    if (totalDoses <= 60) return '2 bo√Ætes'
    if (totalDoses <= 90) return '3 bo√Ætes'
    return `${Math.ceil(totalDoses / 30)} bo√Ætes`
  }
  
  return '1 bo√Æte'
}

function getBiologyCode(examName: any): string {
  const name = String(examName || '').toLowerCase()
  if (!name) return ''
  
  const codes: Record<string, string> = {
    'nfs': '1104',
    'num√©ration formule sanguine': '1104',
    'glyc√©mie': '0552',
    'glucose': '0552',
    'crp': '1803',
    'prot√©ine c r√©active': '1803',
    'tsh': '7217',
    'cr√©atinine': '0592',
    'transaminases': '0522-0523',
    'asat': '0522',
    'alat': '0523',
    'cholest√©rol': '0585',
    'bilan lipidique': '0585-0586-0587-1320',
    'ferritine': '0888',
    'vitamine d': '1810',
    'hba1c': '0997',
    'inr': '1605',
    'ionogramme': '1610-1611',
    'gaz du sang': '5301'
  }
  
  for (const [exam, code] of Object.entries(codes)) {
    if (name.includes(exam)) return code
  }
  
  return ''
}

function requiresFasting(examName: any): boolean {
  const name = String(examName || '').toLowerCase()
  if (!name) return false
  
  const fastingExams = [
    'glyc√©mie', 'glucose', 'bilan lipidique', 'cholest√©rol', 
    'triglyc√©rides', 'hdl', 'ldl', 'glyc√©mie √† jeun',
    'insuline', 'peptide c', 'homa'
  ]
  
  return fastingExams.some(exam => name.includes(exam))
}

function requiresContrast(examType: any): boolean {
  const type = String(examType || '').toLowerCase()
  if (!type) return false
  
  const contrastExams = [
    'scanner', 'tdm', 'tomodensitom√©trie', 'angioscanner',
    'irm avec injection', 'arthroscanner', 'uroscanner',
    'coroscanner', 'angio-irm', 'bili-irm'
  ]
  
  return contrastExams.some(exam => type.includes(exam))
}

function detectAnatomicalRegion(examType: any): string {
  const type = String(examType || '').toLowerCase()
  if (!type) return 'Corps entier'
  
  const regions: Record<string, string> = {
    'thorax': 'Thorax',
    'thoracique': 'Thorax',
    'poumon': 'Thorax',
    'pulmonaire': 'Thorax',
    'abdom': 'Abdomen',
    'ventre': 'Abdomen',
    'foie': 'Abdomen',
    'cr√¢n': 'Cr√¢ne',
    'c√©r√©br': 'Cr√¢ne',
    'rachis': 'Rachis',
    'lombaire': 'Rachis lombaire',
    'cervical': 'Rachis cervical',
    'genou': 'Genou',
    '√©paule': '√âpaule',
    'hanche': 'Hanche',
    'cheville': 'Cheville',
    'main': 'Main',
    'pied': 'Pied'
  }
  
  for (const [key, value] of Object.entries(regions)) {
    if (type.includes(key)) return value
  }
  
  return '√Ä pr√©ciser'
}

function shouldAllowRenewal(diagnosisData: any): boolean {
  const chronicConditions = [
    'hypertension', 'diab√®te', 'asthme', 'bpco', 'insuffisance cardiaque',
    '√©pilepsie', 'parkinson', 'alzheimer', 'polyarthrite', 'thyro√Øde',
    'd√©pression', 'anxi√©t√©', 'cholest√©rol', 'migraine chronique'
  ]
  
  let diagnosisText = ''
  
  // Extraction du texte de diagnostic
  if (diagnosisData?.diagnosis?.primary?.condition) {
    diagnosisText = diagnosisData.diagnosis.primary.condition
  } else if (diagnosisData?.primaryDiagnosis) {
    diagnosisText = diagnosisData.primaryDiagnosis
  } else if (typeof diagnosisData === 'string') {
    diagnosisText = diagnosisData
  }
  
  diagnosisText = diagnosisText.toLowerCase()
  
  return chronicConditions.some(condition => diagnosisText.includes(condition))
}

function getValidityDate(): string {
  const date = new Date()
  date.setMonth(date.getMonth() + 3)
  return date.toLocaleDateString('fr-FR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
}

function calculateWordCount(rapport: any): number {
  const allText = Object.values(rapport)
    .filter(value => typeof value === 'string')
    .join(' ')
  
  return allText.split(/\s+/).filter(word => word.length > 0).length
}

function formatSimplifiedExamsPrescription(reportData: any): string {
  const lines: string[] = ["ORDONNANCE - EXAMENS COMPL√âMENTAIRES\n"]
  
  if (reportData.prescriptions?.biologie?.examens?.length > 0) {
    lines.push("EXAMENS BIOLOGIQUES :")
    reportData.prescriptions.biologie.examens.forEach((exam: any, idx: number) => {
      lines.push(`${idx + 1}. ${exam.type}`)
      if (exam.urgence) lines.push("   ‚Üí URGENT")
      if (exam.jeun) lines.push("   ‚Üí √Ä JEUN")
      if (exam.remarques) lines.push(`   ‚Üí ${exam.remarques}`)
    })
    lines.push("")
  }
  
  if (reportData.prescriptions?.imagerie?.examens?.length > 0) {
    lines.push("EXAMENS D'IMAGERIE :")
    reportData.prescriptions.imagerie.examens.forEach((exam: any, idx: number) => {
      lines.push(`${idx + 1}. ${exam.type} - ${exam.region}`)
      if (exam.urgence) lines.push("   ‚Üí URGENT")
      if (exam.contraste) lines.push("   ‚Üí AVEC INJECTION DE PRODUIT DE CONTRASTE")
      if (exam.indication) lines.push(`   ‚Üí Indication : ${exam.indication}`)
    })
  }
  
  return lines.join("\n")
}

function formatSimplifiedMedicationsPrescription(reportData: any): string {
  const lines: string[] = ["ORDONNANCE M√âDICAMENTEUSE\n"]
  
  if (reportData.prescriptions?.medicaments?.items?.length > 0) {
    reportData.prescriptions.medicaments.items.forEach((med: any, idx: number) => {
      lines.push(`${idx + 1}. ${med.nom} ${med.dosage}`)
      lines.push(`   ${med.posologie}`)
      lines.push(`   Dur√©e : ${med.duree}`)
      if (med.quantite) lines.push(`   Quantit√© : ${med.quantite}`)
      if (med.remarques) lines.push(`   Remarques : ${med.remarques}`)
      lines.push("")
    })
    
    if (reportData.prescriptions.medicaments.renouvellement) {
      lines.push("Cette ordonnance peut √™tre renouvel√©e")
    }
    
    lines.push(`\nOrdonnance valable jusqu'au : ${reportData.prescriptions.medicaments.dateValidite}`)
  }
  
  return lines.join("\n")
}
