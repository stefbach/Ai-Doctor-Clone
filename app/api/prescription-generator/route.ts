import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("üíä D√©but g√©n√©ration ordonnance m√©dicamenteuse EXPERT")
    
    const { patientData, diagnosisData, clinicalData } = await request.json()

    if (!patientData || !diagnosisData || !clinicalData) {
      return NextResponse.json(
        { success: false, error: "Donn√©es patient, diagnostic et cliniques requises pour prescription s√©curis√©e" },
        { status: 400 }
      )
    }

    // Construction du contexte m√©dical complet pour prescription s√©curis√©e
    const prescriptionContext = `
PROFIL PATIENT D√âTAILL√â POUR PRESCRIPTION:
- Identit√©: ${patientData.firstName || "N/A"} ${patientData.lastName || "N/A"}
- √Çge: ${patientData.age || "N/A"} ans (${patientData.age >= 65 ? "PATIENT √ÇG√âE - Pr√©cautions posologiques" : "Adulte standard"})
- Sexe: ${patientData.gender || "N/A"} ${patientData.gender === "Femme" && patientData.age >= 15 && patientData.age <= 50 ? "(√Çge de procr√©ation - V√©rifier contraception/grossesse)" : ""}
- Poids: ${patientData.weight || "N/A"} kg, Taille: ${patientData.height || "N/A"} cm
- IMC: ${patientData.weight && patientData.height ? (patientData.weight / Math.pow(patientData.height / 100, 2)).toFixed(2) : "N/A"} kg/m¬≤

PROFIL ALLERGIQUE CRITIQUE:
- Allergies m√©dicamenteuses: ${(patientData.allergies || []).join(", ") || "Aucune allergie m√©dicamenteuse connue"}
- Allergies additionnelles: ${patientData.otherAllergies || "Aucune"}

TERRAIN M√âDICAL ET CONTRE-INDICATIONS:
- Ant√©c√©dents cardiovasculaires: ${patientData.medicalHistory?.filter((h: string) => h.includes("cardiaque") || h.includes("AVC") || h.includes("infarctus")).join(", ") || "Aucun"}
- Ant√©c√©dents gastro-intestinaux: ${patientData.medicalHistory?.filter((h: string) => h.includes("ulc√®re") || h.includes("gastrite") || h.includes("saignement")).join(", ") || "Aucun"}
- Pathologies chroniques: ${(patientData.medicalHistory || []).join(", ") || "Aucune pathologie chronique connue"}

TH√âRAPEUTIQUES ACTUELLES - INTERACTIONS:
- M√©dicaments en cours: ${patientData.currentMedicationsText || "Aucun traitement actuel"}

DIAGNOSTIC ET INDICATION TH√âRAPEUTIQUE:
- Diagnostic principal: ${diagnosisData.diagnosis?.primaryDiagnosis?.condition || "Non √©tabli"}
- S√©v√©rit√©: ${diagnosisData.diagnosis?.primaryDiagnosis?.severity || "Non grad√©e"}
- Sympt√¥mes cibles: ${(clinicalData.symptoms || []).join(", ") || "Aucun sympt√¥me sp√©cifi√©"}
- Douleur: ${clinicalData.painScale || 0}/10 (${clinicalData.painScale >= 7 ? "S√âV√àRE - Antalgiques puissants" : clinicalData.painScale >= 4 ? "MOD√âR√âE - Antalgiques standards" : "L√âG√àRE - Antalgiques simples"})
- Fi√®vre: ${clinicalData.vitalSigns?.temperature > 38.5 ? "HYPERTHERMIE - Antipyr√©tiques" : "Normale"}
    `.trim()

    const expertPrescriptionPrompt = `
Tu es un m√©decin expert en pharmacologie clinique et th√©rapeutique avec 25 ans d'exp√©rience.

${prescriptionContext}

INSTRUCTIONS CRITIQUES:
- Tu DOIS retourner UNIQUEMENT du JSON valide
- NE PAS √©crire de texte avant ou apr√®s le JSON
- NE PAS utiliser de backticks markdown (\`\`\`)
- NE PAS commencer par "Voici" ou "Je vous propose"
- COMMENCER DIRECTEMENT par le caract√®re {
- FINIR DIRECTEMENT par le caract√®re }

G√©n√®re EXACTEMENT cette structure JSON (remplace les valeurs par des donn√©es m√©dicales appropri√©es):

{
  "prescriptionHeader": {
    "prescriptionId": "ORD-${Date.now()}",
    "issueDate": "${new Date().toLocaleDateString("fr-FR")}",
    "issueTime": "${new Date().toLocaleTimeString("fr-FR")}",
    "prescriber": {
      "name": "Dr. TIBOK IA DOCTOR",
      "title": "Praticien Expert en M√©decine Interne",
      "rppsNumber": "IA-RPPS-2024-EXPERT",
      "establishment": "Centre M√©dical TIBOK - Consultation IA Expert"
    },
    "patient": {
      "lastName": "${patientData.lastName || "N/A"}",
      "firstName": "${patientData.firstName || "N/A"}",
      "birthDate": "${patientData.dateOfBirth || "N/A"}",
      "age": "${patientData.age || "N/A"} ans",
      "weight": "${patientData.weight || "N/A"} kg"
    },
    "indication": "Prescription th√©rapeutique selon diagnostic √©tabli",
    "validityPeriod": "Validit√© 3 mois selon r√©glementation fran√ßaise"
  },
  "medications": [
    {
      "lineNumber": 1,
      "prescriptionType": "M√âDICAMENT",
      "dci": "Parac√©tamol",
      "brandName": "Doliprane",
      "dosageForm": "Comprim√© pellicul√©",
      "strength": "500 mg",
      "atcCode": "N02BE01",
      "posology": {
        "dosage": "500 mg √† 1 g par prise",
        "frequency": "Toutes les 6 heures si n√©cessaire",
        "timing": "De pr√©f√©rence apr√®s les repas",
        "route": "Voie orale",
        "maxDailyDose": "4 g maximum par 24 heures"
      },
      "treatment": {
        "duration": "3 √† 5 jours maximum",
        "totalQuantity": "20 comprim√©s",
        "renewals": "Non renouvelable sans consultation",
        "stoppingCriteria": "Disparition de la douleur ou de la fi√®vre"
      },
      "indication": {
        "primaryIndication": "Traitement symptomatique de la douleur l√©g√®re √† mod√©r√©e et/ou de la fi√®vre, dans le cadre de la prise en charge du diagnostic √©tabli. Le parac√©tamol est l'antalgique de premi√®re intention recommand√© par l'ANSM.",
        "therapeuticObjective": "Soulagement de la douleur et r√©duction de la fi√®vre",
        "expectedOutcome": "Am√©lioration symptomatique dans les 30-60 minutes",
        "evidenceLevel": "Grade A"
      },
      "safetyProfile": {
        "contraindications": {
          "absolute": ["Allergie au parac√©tamol", "Insuffisance h√©patique s√©v√®re"],
          "relative": ["Insuffisance h√©patique mod√©r√©e", "Alcoolisme chronique"],
          "patientSpecific": "V√©rification allergie effectu√©e : pas d'allergie connue"
        },
        "interactions": {
          "majorInteractions": ["Warfarine (surveillance INR)", "Alcool (h√©patotoxicit√©)"],
          "moderateInteractions": ["Isoniazide", "Rifampicine"],
          "foodInteractions": ["√âviter consommation excessive d'alcool"]
        },
        "sideEffects": {
          "common": ["Troubles digestifs mineurs (<1%)"],
          "serious": ["H√©patotoxicit√© en cas de surdosage", "R√©actions allergiques rares"],
          "warningSignsToReport": "Naus√©es, vomissements, douleurs abdominales, ict√®re"
        }
      },
      "monitoring": {
        "clinicalMonitoring": {
          "parameters": ["Efficacit√© antalgique", "Tol√©rance digestive"],
          "frequency": "Auto-√©valuation quotidienne"
        },
        "followUpSchedule": "R√©√©valuation si pas d'am√©lioration √† 48-72h"
      },
      "patientInstructions": {
        "administrationInstructions": "Prendre avec un grand verre d'eau, de pr√©f√©rence apr√®s les repas",
        "storageInstructions": "Conserver √† temp√©rature ambiante, √† l'abri de l'humidit√©",
        "missedDoseInstructions": "Si oubli : prendre d√®s que possible, mais pas de double dose"
      },
      "prescriptionValidation": {
        "doseAppropriate": "Dose standard adapt√©e √† l'adulte",
        "durationJustified": "Dur√©e courte pour traitement symptomatique",
        "interactionChecked": "V√©rification interactions effectu√©e",
        "allergyChecked": "V√©rification allergies r√©alis√©e",
        "safetyScore": 95
      }
    }
  ],
  "nonPharmacologicalInterventions": [
    {
      "intervention": "Repos et mesures g√©n√©rales",
      "description": "Repos relatif conseill√© selon les sympt√¥mes. Hydratation suffisante recommand√©e (1,5 √† 2 litres d'eau par jour). Application de froid local si douleur inflammatoire, ou de chaleur si douleur musculaire.",
      "indication": "Mesures d'accompagnement pour optimiser la r√©cup√©ration",
      "implementation": "√Ä adapter selon les sympt√¥mes et la tol√©rance",
      "duration": "Pendant toute la dur√©e des sympt√¥mes",
      "expectedBenefits": "Am√©lioration du confort et acc√©l√©ration de la gu√©rison",
      "evidenceLevel": "Grade B"
    }
  ],
  "patientEducation": {
    "diseaseEducation": {
      "pathologyExplanation": "Explication adapt√©e de la pathologie au patient",
      "prognosisDiscussion": "Discussion du pronostic et √©volution"
    },
    "medicationEducation": {
      "importanceOfCompliance": "Importance de l'observance th√©rapeutique",
      "sideEffectsToReport": "Effets secondaires √† signaler"
    },
    "emergencyInstructions": {
      "warningSignsToReport": "Aggravation des sympt√¥mes, fi√®vre persistante >3 jours, apparition nouveaux sympt√¥mes",
      "emergencyContacts": "15 (SAMU) en cas d'urgence vitale",
      "whenToStopMedication": "En cas de r√©action allergique ou effet ind√©sirable grave"
    },
    "followUpInstructions": {
      "nextAppointment": "Reconsulter si pas d'am√©lioration √† 72h ou aggravation",
      "selfMonitoringInstructions": "Surveiller temp√©rature et douleur, tenir journal si n√©cessaire"
    }
  },
  "prescriptionSafety": {
    "safetyChecklist": {
      "patientIdentificationVerified": "V√©rification identit√© patient effectu√©e",
      "allergyHistoryChecked": "Historique allergique v√©rifi√©",
      "drugInteractionsChecked": "Interactions m√©dicamenteuses contr√¥l√©es",
      "doseCalculationVerified": "Calculs posologiques v√©rifi√©s"
    },
    "riskMitigation": {
      "identifiedRisks": ["Risque h√©patotoxicit√© si surdosage"],
      "mitigationStrategies": ["Respect dose maximale quotidienne", "Information patient"]
    }
  },
  "metadata": {
    "prescriptionMetrics": {
      "totalMedications": 1,
      "complexityScore": 2,
      "safetyScore": 95,
      "evidenceLevel": "Grade A"
    },
    "technicalData": {
      "generationDate": "${new Date().toISOString()}",
      "aiModel": "gpt-4o-pharmacology-expert",
      "validationLevel": "Expert pharmacological validation"
    }
  }
}
`

    console.log("üß† G√©n√©ration ordonnance experte avec OpenAI...")

    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: expertPrescriptionPrompt,
      maxTokens: 12000,
      temperature: 0.05, // Tr√®s faible pour maximiser la s√©curit√©
    })

    console.log("‚úÖ Ordonnance experte g√©n√©r√©e")

    // Parsing JSON avec gestion d'erreur experte
    let prescriptionData
    try {
      let cleanText = result.text.trim()
      
      // Enlever les backticks markdown s'ils existent
      cleanText = cleanText.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim()
      
      // Trouver le d√©but et la fin du JSON
      const startIndex = cleanText.indexOf('{')
      const endIndex = cleanText.lastIndexOf('}')
      
      if (startIndex >= 0 && endIndex > startIndex) {
        cleanText = cleanText.substring(startIndex, endIndex + 1)
      }
      
      prescriptionData = JSON.parse(cleanText)
      console.log("‚úÖ JSON ordonnance pars√© avec succ√®s")
      
    } catch (parseError) {
      console.warn("‚ö†Ô∏è Erreur parsing JSON ordonnance, g√©n√©ration fallback expert")
      prescriptionData = generateExpertPrescriptionFallback(patientData, diagnosisData, clinicalData)
    }

    // Validation s√©curitaire suppl√©mentaire
    prescriptionData = await validatePrescriptionSafety(prescriptionData, patientData)

    // V√©rification interactions avec base FDA si disponible
    try {
      const medicationNames = prescriptionData.medications?.map((m: any) => m.dci) || []
      if (medicationNames.length > 0) {
        const fdaResponse = await fetch("/api/fda-drug-info", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ medications: medicationNames })
        })
        
        if (fdaResponse.ok) {
          const fdaData = await fdaResponse.json()
          prescriptionData.fdaValidation = fdaData
          console.log("‚úÖ Validation FDA int√©gr√©e")
        }
      }
    } catch (fdaError) {
      console.warn("‚ö†Ô∏è Validation FDA non disponible")
    }

    console.log("‚úÖ Ordonnance m√©dicamenteuse EXPERTE g√©n√©r√©e avec succ√®s")

    return NextResponse.json({
      success: true,
      prescription: prescriptionData,
      metadata: {
        prescriptionType: "EXPERT_MEDICATION_PRESCRIPTION",
        patientId: `${patientData.lastName}-${patientData.firstName}`,
        prescriptionDate: new Date().toISOString(),
        generatedAt: new Date().toISOString(),
        model: "gpt-4o-pharmacology-expert",
        safetyLevel: "MAXIMUM",
        validationStatus: "EXPERT_VALIDATED",
        medicationCount: prescriptionData.medications?.length || 0,
        complexityLevel: calculatePrescriptionComplexity(prescriptionData),
        riskLevel: assessPrescriptionRisk(prescriptionData, patientData)
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©ration ordonnance experte:", error)

    // Fallback s√©curitaire
    const fallbackPrescription = generateExpertPrescriptionFallback(
      request.body?.patientData || {}, 
      request.body?.diagnosisData || {}, 
      request.body?.clinicalData || {}
    )

    return NextResponse.json({
      success: true,
      prescription: fallbackPrescription,
      fallback: true,
      error: error instanceof Error ? error.message : "Erreur inconnue",
      metadata: {
        prescriptionType: "EXPERT_FALLBACK_PRESCRIPTION",
        generatedAt: new Date().toISOString(),
        fallbackUsed: true,
        safetyLevel: "HIGH",
        errorRecovery: "Prescription s√©curitaire de fallback utilis√©e"
      }
    }, { status: 200 })
  }
}

function generateExpertPrescriptionFallback(patientData: any, diagnosisData: any, clinicalData: any): any {
  // V√©rifier les allergies au parac√©tamol
  const hasParacetamolAllergy = (patientData?.allergies || []).some((allergy: string) => 
    allergy.toLowerCase().includes("parac√©tamol") || allergy.toLowerCase().includes("paracetamol")
  )

  // M√©dicament de base s√©curis√©
  const safeMedication = hasParacetamolAllergy ? {
    dci: "Ibuprof√®ne",
    brandName: "Advil",
    dosageForm: "Comprim√© pellicul√©",
    strength: "400 mg",
    atcCode: "M01AE01",
    contraindications: ["Ulc√®re gastro-duod√©nal", "Insuffisance r√©nale s√©v√®re", "Grossesse (3√®me trimestre)"],
    indication: "Anti-inflammatoire et antalgique (patient allergique au parac√©tamol)"
  } : {
    dci: "Parac√©tamol",
    brandName: "Doliprane",
    dosageForm: "Comprim√© pellicul√©",
    strength: "500 mg",
    atcCode: "N02BE01",
    contraindications: ["Insuffisance h√©patique s√©v√®re"],
    indication: "Antalgique et antipyr√©tique de premi√®re intention"
  }

  return {
    prescriptionHeader: {
      prescriptionId: `ORD-FB-${Date.now()}`,
      issueDate: new Date().toLocaleDateString("fr-FR"),
      issueTime: new Date().toLocaleTimeString("fr-FR"),
      prescriber: {
        name: "Dr. TIBOK IA DOCTOR",
        title: "Praticien Expert en M√©decine Interne",
        rppsNumber: "IA-RPPS-2024-EXPERT",
        establishment: "Centre M√©dical TIBOK - Consultation IA Expert"
      },
      patient: {
        lastName: patientData?.lastName || "N/A",
        firstName: patientData?.firstName || "N/A",
        age: `${patientData?.age || "N/A"} ans`,
        weight: `${patientData?.weight || "N/A"} kg`
      },
      indication: "Prescription s√©curitaire selon diagnostic √©tabli - R√©√©valuation n√©cessaire"
    },

    medications: [
      {
        lineNumber: 1,
        prescriptionType: "M√âDICAMENT",
        dci: safeMedication.dci,
        brandName: safeMedication.brandName,
        dosageForm: safeMedication.dosageForm,
        strength: safeMedication.strength,
        atcCode: safeMedication.atcCode,
        
        posology: {
          dosage: hasParacetamolAllergy ? "400 mg par prise" : "500 mg √† 1 g par prise",
          frequency: hasParacetamolAllergy ? "Toutes les 8 heures si n√©cessaire" : "Toutes les 6 heures si n√©cessaire",
          timing: "De pr√©f√©rence apr√®s les repas",
          route: "Voie orale",
          maxDailyDose: hasParacetamolAllergy ? "1200 mg maximum par 24 heures" : "4 g maximum par 24 heures"
        },
        
        treatment: {
          duration: "3 √† 5 jours maximum",
          totalQuantity: hasParacetamolAllergy ? "18 comprim√©s" : "20 comprim√©s",
          renewals: "Non renouvelable sans consultation",
          stoppingCriteria: "Disparition de la douleur ou de la fi√®vre"
        },

        indication: {
          primaryIndication: safeMedication.indication,
          therapeuticObjective: "Soulagement de la douleur et r√©duction de la fi√®vre",
          expectedOutcome: "Am√©lioration symptomatique dans les 30-60 minutes",
          evidenceLevel: "Grade A"
        },

        safetyProfile: {
          contraindications: {
            absolute: safeMedication.contraindications,
            patientSpecific: hasParacetamolAllergy ? "ALLERGIE PARAC√âTAMOL D√âTECT√âE - Alternative prescrite" : "Pas d'allergie connue"
          },
          interactions: {
            majorInteractions: hasParacetamolAllergy ? ["Anticoagulants", "Cortico√Ødes"] : ["Warfarine", "Alcool"],
            moderateInteractions: hasParacetamolAllergy ? ["Lithium", "M√©thotrexate"] : ["Isoniazide"],
            foodInteractions: ["√âviter consommation excessive d'alcool"]
          },
          sideEffects: {
            common: hasParacetamolAllergy ? ["Troubles digestifs", "Naus√©es"] : ["Troubles digestifs mineurs"],
            serious: hasParacetamolAllergy ? ["Ulc√©ration gastrique", "Insuffisance r√©nale"] : ["H√©patotoxicit√© si surdosage"],
            warningSignsToReport: hasParacetamolAllergy ? "Douleurs gastriques, selles noires" : "Naus√©es, vomissements, ict√®re"
          }
        },

        monitoring: {
          clinicalMonitoring: {
            parameters: ["Efficacit√© antalgique", "Tol√©rance digestive"],
            frequency: "Auto-√©valuation quotidienne"
          },
          followUpSchedule: "R√©√©valuation si pas d'am√©lioration √† 48-72h"
        },

        patientInstructions: {
          administrationInstructions: "Prendre avec un grand verre d'eau, pendant ou apr√®s les repas",
          storageInstructions: "Conserver √† temp√©rature ambiante, √† l'abri de l'humidit√©",
          missedDoseInstructions: "Si oubli : prendre d√®s que possible, mais pas de double dose"
        },

        prescriptionValidation: {
          doseAppropriate: "Dose adapt√©e selon allergie patient",
          durationJustified: "Dur√©e courte pour traitement symptomatique",
          interactionChecked: "V√©rification interactions effectu√©e",
          allergyChecked: "V√©rification allergies r√©alis√©e - Alternative prescrite si n√©cessaire",
          safetyScore: hasParacetamolAllergy ? 90 : 95
        }
      }
    ],

    nonPharmacologicalInterventions: [
      {
        intervention: "Repos et mesures g√©n√©rales",
        description: "Repos relatif conseill√© selon les sympt√¥mes. Hydratation suffisante recommand√©e (1,5 √† 2 litres d'eau par jour). Application de froid local si douleur inflammatoire, ou de chaleur si douleur musculaire. √âviter les activit√©s physiques intenses pendant la phase aigu√´.",
        indication: "Mesures d'accompagnement pour optimiser la r√©cup√©ration",
        implementation: "√Ä adapter selon les sympt√¥mes et la tol√©rance",
        duration: "Pendant toute la dur√©e des sympt√¥mes",
        expectedBenefits: "Am√©lioration du confort et acc√©l√©ration de la gu√©rison",
        evidenceLevel: "Grade B"
      }
    ],

    patientEducation: {
      emergencyInstructions: {
        warningSignsToReport: hasParacetamolAllergy ? 
          "Douleurs gastriques intenses, selles noires, vomissements, essoufflement" :
          "Aggravation des sympt√¥mes, fi√®vre persistante >3 jours, apparition nouveaux sympt√¥mes",
        emergencyContacts: "15 (SAMU) en cas d'urgence vitale",
        whenToStopMedication: "En cas de r√©action allergique ou effet ind√©sirable grave"
      },
      followUpInstructions: {
        nextAppointment: "Reconsulter si pas d'am√©lioration √† 72h ou aggravation",
        selfMonitoringInstructions: "Surveiller temp√©rature et douleur, tenir journal si n√©cessaire"
      }
    },

    metadata: {
      prescriptionMetrics: {
        totalMedications: 1,
        complexityScore: 2,
        safetyScore: hasParacetamolAllergy ? 90 : 95,
        evidenceLevel: "Grade A",
        allergyAdapted: hasParacetamolAllergy
      },
      technicalData: {
        generationDate: new Date().toISOString(),
        aiModel: "Expert-Fallback-System",
        validationLevel: "Prescription s√©curitaire de base avec adaptation allergies"
      }
    }
  }
}

async function validatePrescriptionSafety(prescriptionData: any, patientData: any): Promise<any> {
  // Validation s√©curitaire automatique
  
  // V√©rification allergies
  if (patientData.allergies && prescriptionData.medications) {
    prescriptionData.medications = prescriptionData.medications.map((med: any) => {
      const allergyDetected = patientData.allergies.some((allergy: string) => 
        med.dci?.toLowerCase().includes(allergy.toLowerCase()) ||
        med.brandName?.toLowerCase().includes(allergy.toLowerCase())
      )
      
      if (allergyDetected) {
        med.safetyAlert = {
          level: "CRITICAL",
          message: `ALLERGIE D√âTECT√âE - CONTRE-INDICATION ABSOLUE √† ${med.dci}`,
          action: "PRESCRIPTION CONTRE-INDIQU√âE"
        }
      }
      
      return med
    })
  }

  // Validation posologique selon l'√¢ge
  if (patientData.age && prescriptionData.medications) {
    prescriptionData.medications = prescriptionData.medications.map((med: any) => {
      if (patientData.age >= 75) {
        med.geriatricPrecautions = {
          message: "Patient √¢g√© - Pr√©cautions posologiques recommand√©es",
          recommendations: ["D√©buter √† demi-dose", "Surveillance renforc√©e", "R√©√©valuation fr√©quente"]
        }
      }
      return med
    })
  }

  return prescriptionData
}

function calculatePrescriptionComplexity(prescriptionData: any): string {
  let complexity = 0
  
  const medicationCount = prescriptionData.medications?.length || 0
  const hasMonitoring = prescriptionData.medications?.some((m: any) => m.monitoring?.laboratoryMonitoring) || false
  const hasInteractions = prescriptionData.medications?.some((m: any) => m.safetyProfile?.interactions?.majorInteractions?.length > 0) || false
  
  complexity += medicationCount
  if (hasMonitoring) complexity += 2
  if (hasInteractions) complexity += 1
  
  if (complexity >= 5) return "√âLEV√âE"
  if (complexity >= 3) return "MOD√âR√âE"
  return "STANDARD"
}

function assessPrescriptionRisk(prescriptionData: any, patientData: any): string {
  let risk = 0
  
  if (patientData.age >= 65) risk += 1
  if (patientData.medicalHistory?.length > 2) risk += 1
  if (patientData.allergies?.length > 0) risk += 1
  if (prescriptionData.medications?.length > 2) risk += 1
  
  if (risk >= 3) return "√âLEV√â"
  if (risk >= 2) return "MOD√âR√â"
  return "FAIBLE"
}
