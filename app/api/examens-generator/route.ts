import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("üî¨ D√©but g√©n√©ration ordonnance examens EXPERT")
    
    const { patientData, diagnosisData, clinicalData } = await request.json()

    if (!patientData || !diagnosisData || !clinicalData) {
      return NextResponse.json(
        { success: false, error: "Donn√©es patient, diagnostic et cliniques requises pour prescription examens s√©curis√©e" },
        { status: 400 }
      )
    }

    // Construction du contexte m√©dical complet pour prescription examens
    const examensContext = `
PROFIL PATIENT D√âTAILL√â POUR EXAMENS:
- Identit√©: ${patientData.firstName || "N/A"} ${patientData.lastName || "N/A"}
- √Çge: ${patientData.age || "N/A"} ans (${patientData.age >= 65 ? "PATIENT √ÇG√âE - Adaptations g√©riatriques n√©cessaires" : "Adulte standard"})
- Sexe: ${patientData.gender || "N/A"} ${patientData.gender === "Femme" && patientData.age >= 15 && patientData.age <= 50 ? "(√Çge de procr√©ation - Test grossesse si pertinent)" : ""}
- Poids: ${patientData.weight || "N/A"} kg, Taille: ${patientData.height || "N/A"} cm
- IMC: ${patientData.weight && patientData.height ? (patientData.weight / Math.pow(patientData.height / 100, 2)).toFixed(2) : "N/A"} kg/m¬≤

ALLERGIES ET INTOL√âRANCES CRITIQUES:
- Allergies m√©dicamenteuses: ${(patientData.allergies || []).join(", ") || "Aucune allergie connue"}
- Allergie iode/produits de contraste: ${patientData.allergies?.includes("Iode") || patientData.allergies?.includes("Contraste") ? "ALLERGIE IODE - CONTRE-INDICATION ABSOLUE" : "Non document√©e"}

TERRAIN M√âDICAL SP√âCIFIQUE:
- Cardiopathie: ${patientData.medicalHistory?.filter((h: string) => h.includes("cardiaque") || h.includes("infarctus")).join(", ") || "Aucune cardiopathie connue"}
- Diab√®te: ${patientData.medicalHistory?.includes("Diab√®te") ? "DIAB√àTE - Pr√©cautions metformine et produits de contraste" : "Pas de diab√®te connu"}
- Insuffisance r√©nale: ${patientData.medicalHistory?.includes("Insuffisance r√©nale") ? "IR CONNUE - Adaptation doses et contre-indications" : "Fonction r√©nale suppos√©e normale"}

PR√âSENTATION CLINIQUE POUR ORIENTATION EXAMENS:
- Diagnostic principal: ${diagnosisData.diagnosis?.primaryDiagnosis?.condition || "Non √©tabli"}
- S√©v√©rit√©: ${diagnosisData.diagnosis?.primaryDiagnosis?.severity || "Non grad√©e"}
- Sympt√¥mes cibles: ${(clinicalData.symptoms || []).join(", ") || "Aucun sympt√¥me sp√©cifi√©"}
- Douleur: ${clinicalData.painScale || 0}/10
- Urgence diagnostique: ${diagnosisData.diagnosis?.urgencyLevel || "Standard"}
    `.trim()

    const expertExamensPrompt = `
Tu es un m√©decin expert en m√©decine diagnostique avec 25 ans d'exp√©rience. 

${examensContext}

INSTRUCTIONS CRITIQUES:
- Tu DOIS retourner UNIQUEMENT du JSON valide
- NE PAS √©crire de texte avant ou apr√®s le JSON
- NE PAS utiliser de backticks markdown (\`\`\`)
- NE PAS commencer par "Voici" ou "Je vous propose"
- COMMENCER DIRECTEMENT par le caract√®re {
- FINIR DIRECTEMENT par le caract√®re }

G√©n√®re EXACTEMENT cette structure JSON (remplace les valeurs par des donn√©es m√©dicales appropri√©es):

{
  "prescriptionHeader": {
    "prescriptionId": "EXA-${Date.now()}",
    "issueDate": "${new Date().toLocaleDateString("fr-FR")}",
    "issueTime": "${new Date().toLocaleTimeString("fr-FR")}",
    "prescriber": {
      "name": "Dr. TIBOK IA DOCTOR",
      "title": "Praticien Expert en M√©decine Interne",
      "rppsNumber": "IA-RPPS-2024-EXPERT",
      "establishment": "Centre M√©dical TIBOK - Consultation IA Expert"
    },
    "patient": {
      "lastName": "${patientData.lastName || "N/A"}",
      "firstName": "${patientData.firstName || "N/A"}",
      "birthDate": "${patientData.dateOfBirth || "N/A"}",
      "age": "${patientData.age || "N/A"} ans",
      "weight": "${patientData.weight || "N/A"} kg"
    },
    "clinicalContext": "Examens compl√©mentaires selon diagnostic √©tabli et symptomatologie",
    "urgencyLevel": "Standard"
  },
  "laboratoryTests": [
    {
      "categoryId": "HEMATOLOGIE_BIOCHIMIE",
      "categoryName": "Examens H√©matologiques et Biochimiques",
      "tests": [
        {
          "testId": "NFS_IONO_CRP",
          "testName": "NFS + Ionogramme + CRP",
          "nabmCode": "B0101",
          "cost": "45.60‚Ç¨",
          "reimbursement": "65%",
          "indication": {
            "primaryIndication": "Bilan biologique de premi√®re intention dans le cadre de l'√©valuation diagnostique. La NFS permet de d√©tecter une an√©mie, un syndrome infectieux ou inflammatoire. L'ionogramme √©value l'√©quilibre hydro√©lectrolytique et la fonction r√©nale. La CRP quantifie le syndrome inflammatoire.",
            "clinicalObjective": "D√©pistage anomalies h√©matologiques, m√©taboliques et inflammatoires",
            "evidenceLevel": "Grade A"
          },
          "technicalSpecs": {
            "sampleType": "Sang veineux - 2 tubes (EDTA + sec)",
            "sampleVolume": "6 mL total",
            "fastingRequired": "Non n√©cessaire",
            "processingTime": "2-4 heures",
            "resultDelay": "M√™me jour si urgence"
          },
          "contraindications": {
            "absolute": ["Aucune contre-indication absolue"],
            "relative": ["Troubles coagulation majeurs"],
            "patientSpecific": "Pas de pr√©caution particuli√®re pour ce patient"
          },
          "urgency": {
            "level": "Semi-urgente",
            "timing": "Dans les 24-48 heures",
            "justification": "Bilan initial pour orientation diagnostique"
          }
        }
      ]
    }
  ],
  "imagingStudies": [
    {
      "categoryId": "RADIOLOGIE_STANDARD",
      "categoryName": "Imagerie Standard",
      "examinations": [
        {
          "examId": "THORAX_FACE",
          "examName": "Radiographie Thorax Face",
          "ccamCode": "ZBQK002",
          "cost": "25.12‚Ç¨",
          "reimbursement": "70%",
          "indication": {
            "primaryIndication": "Imagerie thoracique de premi√®re intention selon sympt√¥mes respiratoires ou dans le cadre d'un bilan g√©n√©ral. Permet le d√©pistage de pathologies pulmonaires, cardiaques ou m√©diastinales.",
            "clinicalQuestion": "√âlimination pathologie thoracique visible sur radiographie standard",
            "diagnosticImpact": "Orientation diagnostique imm√©diate ou √©limination pathologie grave"
          },
          "technicalProtocol": {
            "technique": "Radiographie num√©rique face debout en inspiration",
            "positioning": "Patient debout, face au d√©tecteur, bras √©cart√©s",
            "views": "Incidence face obligatoire"
          },
          "contraindications": {
            "absolute": ["Grossesse (premier trimestre) sans indication vitale"],
            "patientSpecific": "V√©rification absence grossesse si femme en √¢ge de procr√©er"
          },
          "patientPreparation": {
            "preparationRequired": "D√©shabillage jusqu'√† la ceinture",
            "clothingInstructions": "Retirer bijoux, montres, objets m√©talliques"
          },
          "urgency": {
            "level": "Programm√©e",
            "timing": "Dans les 7-15 jours",
            "justification": "Imagerie de d√©brouillage thoracique"
          }
        }
      ]
    }
  ],
  "specializedTests": [
    {
      "categoryId": "CARDIOLOGIE",
      "categoryName": "Explorations Cardiologiques",
      "examinations": [
        {
          "examId": "ECG_12_DERIVATIONS",
          "examName": "√âlectrocardiogramme 12 d√©rivations",
          "nabmCode": "DEQP003",
          "cost": "14.80‚Ç¨",
          "reimbursement": "70%",
          "indication": {
            "primaryIndication": "Exploration cardiologique selon sympt√¥mes (douleur thoracique, palpitations, dyspn√©e)",
            "clinicalObjective": "D√©pistage troubles rythme, isch√©mie, troubles conduction"
          },
          "technicalSpecs": {
            "duration": "5-10 minutes",
            "positioning": "D√©cubitus dorsal, repos 5 minutes"
          },
          "contraindications": {
            "absolute": ["Aucune contre-indication absolue"],
            "relative": ["L√©sions cutan√©es √©tendues au niveau √©lectrodes"]
          },
          "urgency": {
            "level": "Semi-urgente",
            "timing": "Dans les 24-48 heures",
            "justification": "√âlimination pathologie cardiaque selon sympt√¥mes"
          }
        }
      ]
    }
  ],
  "followUpPlan": {
    "resultsTiming": {
      "laboratoryResults": "24-48 heures pour examens urgents, 3-5 jours routine",
      "imagingResults": "M√™me jour si urgence, 24-72h routine",
      "specializedTestResults": "1-2 semaines selon complexit√©"
    },
    "interpretationPlan": {
      "resultReview": "R√©vision syst√©matique de tous r√©sultats",
      "clinicalCorrelation": "Corr√©lation clinico-biologique obligatoire"
    },
    "nextSteps": {
      "followUpConsultation": "Consultation r√©sultats dans 7-15 jours",
      "urgentCallback": "Contact imm√©diat si r√©sultats critiques"
    }
  },
  "metadata": {
    "prescriptionMetrics": {
      "totalExaminations": 3,
      "complexityScore": 3,
      "costEstimate": "85.52‚Ç¨"
    },
    "technicalData": {
      "generationDate": "${new Date().toISOString()}",
      "aiModel": "gpt-4o-diagnostic-imaging-expert",
      "validationLevel": "Expert diagnostic validation"
    }
  }
}
`

    console.log("üß† G√©n√©ration ordonnance examens experte avec OpenAI...")

    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: expertExamensPrompt,
      maxTokens: 16000,
      temperature: 0.05, // Tr√®s faible pour maximiser la pr√©cision
    })

    console.log("‚úÖ Ordonnance examens experte g√©n√©r√©e")

    // Parsing JSON avec gestion d'erreur experte
    let examensData
    try {
      let cleanText = result.text.trim()
      
      // Enlever les backticks markdown s'ils existent
      cleanText = cleanText.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim()
      
      // Trouver le d√©but et la fin du JSON
      const startIndex = cleanText.indexOf('{')
      const endIndex = cleanText.lastIndexOf('}')
      
      if (startIndex >= 0 && endIndex > startIndex) {
        cleanText = cleanText.substring(startIndex, endIndex + 1)
      }
      
      examensData = JSON.parse(cleanText)
      console.log("‚úÖ JSON examens pars√© avec succ√®s")
      
    } catch (parseError) {
      console.warn("‚ö†Ô∏è Erreur parsing JSON examens, g√©n√©ration fallback expert")
      examensData = generateExpertExamensFallback(patientData, diagnosisData, clinicalData)
    }

    // Validation s√©curitaire suppl√©mentaire
    examensData = await validateExamensSafety(examensData, patientData)

    // Calcul automatique des m√©triques
    if (examensData.metadata) {
      examensData.metadata.calculatedMetrics = {
        totalExaminations: calculateTotalExaminations(examensData),
        estimatedCost: calculateEstimatedCost(examensData),
        urgentExamsCount: countUrgentExams(examensData),
        averageResultDelay: "48-72 heures"
      }
    }

    console.log("‚úÖ Ordonnance examens EXPERTE g√©n√©r√©e avec succ√®s")

    return NextResponse.json({
      success: true,
      examens: examensData,
      metadata: {
        prescriptionType: "EXPERT_EXAMINATIONS_PRESCRIPTION",
        patientId: `${patientData.lastName}-${patientData.firstName}`,
        prescriptionDate: new Date().toISOString(),
        generatedAt: new Date().toISOString(),
        model: "gpt-4o-diagnostic-expert",
        safetyLevel: "MAXIMUM",
        validationStatus: "EXPERT_VALIDATED",
        examinationsCount: calculateTotalExaminations(examensData),
        complexityLevel: calculateExamensComplexity(examensData),
        riskLevel: assessExamensRisk(examensData, patientData),
        estimatedCost: calculateEstimatedCost(examensData)
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©ration ordonnance examens experte:", error)

    // Fallback s√©curitaire
    const fallbackExamens = generateExpertExamensFallback(
      request.body?.patientData || {}, 
      request.body?.diagnosisData || {}, 
      request.body?.clinicalData || {}
    )

    return NextResponse.json({
      success: true,
      examens: fallbackExamens,
      fallback: true,
      error: error instanceof Error ? error.message : "Erreur inconnue",
      metadata: {
        prescriptionType: "EXPERT_FALLBACK_EXAMINATIONS",
        generatedAt: new Date().toISOString(),
        fallbackUsed: true,
        safetyLevel: "HIGH",
        errorRecovery: "Prescription examens s√©curitaire de fallback utilis√©e"
      }
    }, { status: 200 })
  }
}

function generateExpertExamensFallback(patientData: any, diagnosisData: any, clinicalData: any): any {
  return {
    prescriptionHeader: {
      prescriptionId: `EXA-FB-${Date.now()}`,
      issueDate: new Date().toLocaleDateString("fr-FR"),
      issueTime: new Date().toLocaleTimeString("fr-FR"),
      prescriber: {
        name: "Dr. TIBOK IA DOCTOR",
        title: "Praticien Expert en M√©decine Interne",
        rppsNumber: "IA-RPPS-2024-EXPERT",
        establishment: "Centre M√©dical TIBOK - Consultation IA Expert"
      },
      patient: {
        lastName: patientData?.lastName || "N/A",
        firstName: patientData?.firstName || "N/A",
        age: `${patientData?.age || "N/A"} ans`,
        weight: `${patientData?.weight || "N/A"} kg`
      },
      clinicalContext: `Bilan diagnostique selon sympt√¥mes pr√©sent√©s : ${(clinicalData?.symptoms || []).join(", ") || "sympt√¥mes √† pr√©ciser"}`,
      urgencyLevel: "Programm√©e"
    },

    laboratoryTests: [
      {
        categoryId: "HEMATOLOGIE_BIOCHIMIE",
        categoryName: "Bilan Biologique Standard",
        tests: [
          {
            testId: "NFS_IONO_CRP",
            testName: "NFS + Ionogramme + CRP",
            nabmCode: "B0101 + B0102 + B0103",
            cost: "45.60‚Ç¨",
            reimbursement: "65%",
            
            indication: {
              primaryIndication: "Bilan biologique de premi√®re intention dans le cadre de l'√©valuation diagnostique. La NFS permet de d√©tecter une an√©mie, un syndrome infectieux ou inflammatoire. L'ionogramme √©value l'√©quilibre hydro√©lectrolytique et la fonction r√©nale. La CRP quantifie le syndrome inflammatoire.",
              clinicalObjective: "D√©pistage anomalies h√©matologiques, m√©taboliques et inflammatoires",
              evidenceLevel: "Grade A"
            },

            technicalSpecs: {
              sampleType: "Sang veineux - 2 tubes (EDTA + sec)",
              sampleVolume: "6 mL total",
              fastingRequired: "Non n√©cessaire",
              processingTime: "2-4 heures",
              resultDelay: "M√™me jour si urgence"
            },

            contraindications: {
              absolute: ["Aucune contre-indication absolue"],
              relative: ["Troubles coagulation majeurs"],
              patientSpecific: patientData?.allergies?.includes("Latex") ? "Allergie latex - Pr√©cautions pr√©l√®vement" : "Pas de pr√©caution particuli√®re"
            },

            urgency: {
              level: "Semi-urgente",
              timing: "Dans les 24-48 heures",
              justification: "Bilan initial pour orientation diagnostique"
            }
          }
        ]
      }
    ],

    imagingStudies: [
      {
        categoryId: "RADIOLOGIE_STANDARD",
        categoryName: "Imagerie de Base",
        examinations: [
          {
            examId: "THORAX_FACE",
            examName: "Radiographie Thorax Face",
            ccamCode: "ZBQK002",
            cost: "25.12‚Ç¨",
            reimbursement: "70%",

            indication: {
              primaryIndication: "Imagerie thoracique de premi√®re intention selon sympt√¥mes respiratoires ou dans le cadre d'un bilan g√©n√©ral. Permet le d√©pistage de pathologies pulmonaires, cardiaques ou m√©diastinales.",
              clinicalQuestion: "√âlimination pathologie thoracique visible sur radiographie standard",
              diagnosticImpact: "Orientation diagnostique imm√©diate ou √©limination pathologie grave"
            },

            contraindications: {
              absolute: patientData?.gender === "Femme" && patientData?.age >= 15 && patientData?.age <= 50 ? ["Grossesse (premier trimestre) sans indication vitale"] : ["Aucune"],
              patientSpecific: "V√©rification absence grossesse si femme en √¢ge de procr√©er"
            },

            urgency: {
              level: "Programm√©e",
              timing: "Dans les 7-15 jours",
              justification: "Imagerie de d√©brouillage thoracique"
            }
          }
        ]
      }
    ],

    specializedTests: [
      {
        categoryId: "CARDIOLOGIE",
        categoryName: "Bilan Cardiaque de Base",
        examinations: [
          {
            examId: "ECG_REPOS",
            examName: "√âlectrocardiogramme de repos",
            nabmCode: "DEQP003",
            cost: "14.80‚Ç¨",
            reimbursement: "70%",

            indication: {
              primaryIndication: "ECG de d√©pistage selon sympt√¥mes cardiovasculaires ou dans le cadre d'un bilan syst√©matique. D√©tection troubles rythme, conduction, signes isch√©mie.",
              clinicalObjective: "√âlimination pathologie cardiaque √©lectrique"
            },

            contraindications: {
              absolute: ["Aucune contre-indication"],
              relative: ["L√©sions cutan√©es au niveau √©lectrodes"],
              patientSpecific: "Examen non invasif sans risque particulier"
            },

            urgency: {
              level: "Semi-urgente",
              timing: "Dans les 24-48 heures",
              justification: "√âlimination urgence cardiologique selon sympt√¥mes"
            }
          }
        ]
      }
    ],

    followUpPlan: {
      resultsTiming: {
        laboratoryResults: "24-48 heures",
        imagingResults: "24-72 heures",
        specializedTestResults: "Imm√©diat pour ECG"
      },
      interpretationPlan: {
        resultReview: "R√©vision syst√©matique tous r√©sultats dans les 72h",
        clinicalCorrelation: "Corr√©lation clinico-biologique obligatoire",
        nextSteps: "Adaptation prise en charge selon r√©sultats"
      },
      nextSteps: {
        followUpConsultation: "Consultation r√©sultats dans 7-10 jours",
        urgentCallback: "Contact imm√©diat si valeurs critiques",
        emergencyInstructions: "Consulter urgences si aggravation clinique"
      }
    },

    metadata: {
      prescriptionMetrics: {
        totalExaminations: 3,
        complexityScore: 3,
        costEstimate: "85.52‚Ç¨",
        timeToResults: "48-72 heures",
        diagnosticYield: "√âlev√©e pour bilan de premi√®re intention"
      },
      technicalData: {
        generationDate: new Date().toISOString(),
        aiModel: "Expert-Fallback-Examens",
        validationLevel: "Prescription examens s√©curitaire de base"
      }
    }
  }
}

async function validateExamensSafety(examensData: any, patientData: any): Promise<any> {
  // Validation s√©curitaire automatique examens
  
  // V√©rification grossesse pour examens irradiants
  if (patientData.gender === "Femme" && patientData.age >= 15 && patientData.age <= 50) {
    if (examensData.imagingStudies) {
      examensData.pregnancyWarning = {
        level: "IMPORTANT",
        message: "Femme en √¢ge de procr√©er - V√©rifier absence grossesse avant examens irradiants",
        action: "Test grossesse si doute avant radiologie"
      }
    }
  }

  // V√©rification fonction r√©nale pour produits de contraste
  if (patientData.age > 65 || patientData.medicalHistory?.includes("Insuffisance r√©nale")) {
    examensData.renalSafetyWarning = {
      level: "CRITIQUE",
      message: "Fonction r√©nale √† v√©rifier avant injection produits de contraste",
      action: "Cr√©atinin√©mie obligatoire avant injection"
    }
  }

  return examensData
}

function calculateTotalExaminations(examensData: any): number {
  let total = 0
  if (examensData.laboratoryTests) total += examensData.laboratoryTests.reduce((sum: number, cat: any) => sum + (cat.tests?.length || 0), 0)
  if (examensData.imagingStudies) total += examensData.imagingStudies.reduce((sum: number, cat: any) => sum + (cat.examinations?.length || 0), 0)
  if (examensData.specializedTests) total += examensData.specializedTests.reduce((sum: number, cat: any) => sum + (cat.examinations?.length || 0), 0)
  return total
}

function calculateEstimatedCost(examensData: any): string {
  // Calcul approximatif bas√© sur tarifs moyens
  const examCount = calculateTotalExaminations(examensData)
  const averageCost = 35 // Co√ªt moyen par examen
  return `${(examCount * averageCost).toFixed(2)}‚Ç¨`
}

function countUrgentExams(examensData: any): number {
  let urgent = 0
  // Compter examens urgents dans toutes cat√©gories
  return urgent
}

function calculateExamensComplexity(examensData: any): string {
  const totalExams = calculateTotalExaminations(examensData)
  
  if (totalExams >= 8) return "√âLEV√âE"
  if (totalExams >= 5) return "MOD√âR√âE"
  return "STANDARD"
}

function assessExamensRisk(examensData: any, patientData: any): string {
  let risk = 0
  
  if (patientData.age >= 65) risk += 1
  if (patientData.allergies?.length > 0) risk += 1
  if (calculateTotalExaminations(examensData) > 5) risk += 1
  
  if (risk >= 2) return "MOD√âR√â"
  return "FAIBLE"
}
