import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

export async function POST(request: NextRequest) {
  try {
    console.log("ü©∫ D√©but diagnostic expert")
    
    const { patientData, clinicalData, questionsData } = await request.json()

    // Validation des donn√©es d'entr√©e
    if (!patientData || !clinicalData) {
      return NextResponse.json({ success: false, error: "Donn√©es patient ou cliniques manquantes" }, { status: 400 })
    }

    // Construction du contexte complet
    const fullContext = `
PROFIL PATIENT COMPLET:
- Identit√©: ${patientData.firstName || "N/A"} ${patientData.lastName || "N/A"}
- √Çge: ${patientData.age || "N/A"} ans
- Sexe: ${patientData.gender || "N/A"}
- Poids: ${patientData.weight || "N/A"} kg, Taille: ${patientData.height || "N/A"} cm
- IMC: ${patientData.weight && patientData.height ? (patientData.weight / Math.pow(patientData.height / 100, 2)).toFixed(1) : "N/A"}
- Allergies: ${(patientData.allergies || []).join(", ") || "Aucune connue"}
- Ant√©c√©dents m√©dicaux: ${(patientData.medicalHistory || []).join(", ") || "Aucun"}
- M√©dicaments actuels: ${patientData.currentMedicationsText || "Aucun"}

PR√âSENTATION CLINIQUE:
- Motif de consultation: ${clinicalData.chiefComplaint || "N/A"}
- Sympt√¥mes pr√©sents: ${(clinicalData.symptoms || []).join(", ") || "Aucun"}
- Dur√©e d'√©volution: ${clinicalData.symptomDuration || "N/A"}
- √âchelle de douleur: ${clinicalData.painScale || 0}/10
- Impact fonctionnel: ${clinicalData.functionalStatus || "N/A"}

R√âPONSES AUX QUESTIONS SP√âCIALIS√âES:
${questionsData?.responses ? questionsData.responses.map((r: any) => `- ${r.question}: ${r.answer}`).join("\n") : "Aucune question suppl√©mentaire pos√©e"}
    `.trim()

    const diagnosticPrompt = `
Tu es un m√©decin expert sp√©cialis√© en m√©decine interne. Analyse ce cas clinique et fournis un diagnostic expert D√âTAILL√â.

${fullContext}

R√©ponds UNIQUEMENT avec ce JSON exact (sans markdown, sans texte suppl√©mentaire) :

{
  "clinicalReasoning": {
    "semiology": "Analyse s√©miologique D√âTAILL√âE (minimum 200 mots) : description pr√©cise des sympt√¥mes, signification clinique, corr√©lations anatomiques, m√©canismes physiopathologiques dans ce cas pr√©cis",
    "syndromes": [
      {
        "name": "Nom du syndrome clinique principal",
        "description": "Description compl√®te du syndrome avec crit√®res diagnostiques",
        "presence": "Arguments cliniques justifiant ce syndrome chez ce patient",
        "significance": "Signification pronostique et th√©rapeutique"
      }
    ],
    "pathophysiology": "M√©canismes physiopathologiques APPROFONDIS (minimum 150 mots) : cascade √©v√©nements, voies m√©taboliques, facteurs d√©clenchants"
  },
  "primaryDiagnosis": {
    "condition": "Nom pr√©cis de la condition m√©dicale",
    "icd10": "Code CIM-10 exact",
    "probability": 85,
    "detailedDescription": "Description m√©dicale COMPL√àTE (minimum 250 mots) : d√©finition, √©pid√©miologie, physiopathologie, pr√©sentation clinique, √©volution",
    "clinicalPresentation": "Description D√âTAILL√âE (minimum 150 mots) de la manifestation chez ce patient sp√©cifique",
    "arguments": [
      {
        "type": "Anamnestique",
        "evidence": "√âl√©ment pr√©cis de l'histoire",
        "significance": "Pourquoi cet √©l√©ment oriente vers ce diagnostic",
        "weight": "Fort"
      }
    ],
    "severity": "L√©g√®re/Mod√©r√©e/S√©v√®re",
    "severityJustification": "Justification D√âTAILL√âE du degr√© de s√©v√©rit√©"
  },
  "differentialDiagnosis": [
    {
      "condition": "Premier diagnostic diff√©rentiel",
      "icd10": "Code CIM-10",
      "probability": 60,
      "detailedDescription": "Description COMPL√àTE (minimum 200 mots) de cette pathologie alternative",
      "argumentsFor": [
        {
          "evidence": "√âl√©ment supportant ce diagnostic",
          "significance": "Pourquoi en faveur",
          "strength": "Fort"
        }
      ],
      "argumentsAgainst": [
        {
          "evidence": "√âl√©ment contre ce diagnostic",
          "significance": "Pourquoi contre",
          "strength": "Fort"
        }
      ]
    }
  ],
  "recommendedExams": [
    {
      "category": "Biologie",
      "exam": "Nom pr√©cis de l'examen",
      "indication": "Justification m√©dicale D√âTAILL√âE",
      "urgency": "Imm√©diate/Semi-urgente/Programm√©e",
      "urgencyJustification": "Justification du degr√© d'urgence"
    }
  ],
  "therapeuticStrategy": {
    "immediate": [
      {
        "type": "Symptomatique",
        "treatment": "Traitement avec posologie",
        "indication": "Justification D√âTAILL√âE",
        "duration": "Dur√©e avec justification",
        "monitoring": "Surveillance requise"
      }
    ]
  },
  "prognosis": {
    "shortTerm": "Pronostic imm√©diat D√âTAILL√â",
    "longTerm": "Pronostic long terme",
    "followUp": "Plan de suivi D√âTAILL√â"
  },
  "aiConfidence": 85,
  "redFlags": [
    {
      "sign": "Signe d'alarme pr√©cis",
      "significance": "Pourquoi pr√©occupant",
      "action": "Conduite √† tenir"
    }
  ],
  "metadata": {
    "analysisDate": "${new Date().toISOString()}",
    "model": "gpt-4o",
    "evidenceLevel": "Grade A"
  }
}
`

    console.log("üß† G√©n√©ration diagnostic avec OpenAI...")

    const result = await generateText({
      model: openai("gpt-4o"),
      prompt: diagnosticPrompt,
      maxTokens: 6000,
      temperature: 0.1,
    })

    console.log("‚úÖ R√©ponse OpenAI re√ßue")

    // Nettoyage et parsing JSON
    let diagnosticData
    try {
      let cleanText = result.text.trim()
      cleanText = cleanText.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim()
      
      const startIndex = cleanText.indexOf('{')
      if (startIndex > 0) {
        cleanText = cleanText.substring(startIndex)
      }
      
      const endIndex = cleanText.lastIndexOf('}')
      if (endIndex > 0) {
        cleanText = cleanText.substring(0, endIndex + 1)
      }
      
      diagnosticData = JSON.parse(cleanText)
      console.log("‚úÖ JSON pars√© avec succ√®s")
      
    } catch (parseError) {
      console.warn("‚ö†Ô∏è Erreur parsing JSON, utilisation fallback")
      
      diagnosticData = {
        clinicalReasoning: {
          semiology: "Analyse en cours - donn√©es cliniques en cours d'√©valuation",
          syndromes: [{ name: "Syndrome √† pr√©ciser", description: "√âvaluation en cours" }],
          pathophysiology: "M√©canismes √† √©lucider par examens compl√©mentaires"
        },
        primaryDiagnosis: {
          condition: "√âvaluation clinique en cours",
          icd10: "R06.9",
          probability: 70,
          detailedDescription: "Analyse diagnostique en cours selon les sympt√¥mes pr√©sent√©s",
          arguments: [{ type: "Clinique", evidence: "Sympt√¥mes pr√©sent√©s", significance: "Orientation diagnostique", weight: "Mod√©r√©" }],
          severity: "√Ä √©valuer"
        },
        differentialDiagnosis: [],
        recommendedExams: [
          {
            category: "Biologie",
            exam: "Bilan biologique standard",
            indication: "√âvaluation g√©n√©rale",
            urgency: "Programm√©e"
          }
        ],
        therapeuticStrategy: {
          immediate: [
            {
              type: "Symptomatique",
              treatment: "Selon sympt√¥mes",
              indication: "Soulagement symptomatique",
              duration: "Selon √©volution"
            }
          ]
        },
        prognosis: {
          shortTerm: "√Ä √©valuer selon examens",
          longTerm: "Selon diagnostic final",
          followUp: "R√©√©valuation n√©cessaire"
        },
        aiConfidence: 60,
        redFlags: [{ sign: "Aggravation", significance: "Surveillance", action: "R√©√©valuation" }],
        metadata: {
          analysisDate: new Date().toISOString(),
          model: "gpt-4o-fallback",
          evidenceLevel: "Grade C"
        }
      }
    }

    console.log("‚úÖ Diagnostic expert g√©n√©r√© avec succ√®s")

    return NextResponse.json({
      success: true,
      diagnosis: diagnosticData,
      metadata: {
        patientAge: patientData.age,
        patientGender: patientData.gender,
        generatedAt: new Date().toISOString(),
        model: "gpt-4o"
      }
    })

  } catch (error) {
    console.error("‚ùå Erreur diagnostic expert:", error)
    
    return NextResponse.json({
      success: false,
      error: "Erreur lors de la g√©n√©ration du diagnostic",
      details: error instanceof Error ? error.message : "Erreur inconnue"
    }, { status: 500 })
  }
}
