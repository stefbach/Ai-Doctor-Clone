// lib/generate-report-helper.ts

import { consultationDataService } from './consultation-data-service'

export interface ReportGenerationResult {
  success: boolean
  report?: any
  documents?: any
  error?: string
  errorDetails?: any
}

/**
 * G√©n√®re le rapport m√©dical complet en appelant l'API
 * Cette fonction s'assure que les donn√©es sont au bon format pour l'API
 */
export async function generateMedicalReport(): Promise<ReportGenerationResult> {
  try {
    console.log('üöÄ D√©but de la g√©n√©ration du rapport m√©dical')
    
    // 1. R√©cup√©rer toutes les donn√©es au format API
    const reportData = await consultationDataService.getDataForReportGeneration()
    
    // 2. Valider les donn√©es
    const validation = consultationDataService.validateDataForReport(reportData)
    if (!validation.isValid) {
      console.error('‚ùå Donn√©es invalides:', validation.errors)
      return {
        success: false,
        error: 'Donn√©es incompl√®tes',
        errorDetails: validation.errors
      }
    }
    
    console.log('‚úÖ Donn√©es valid√©es, envoi √† l\'API...')
    console.log('üìã Structure des donn√©es:', {
      patientData: reportData.patientData ? '‚úì' : '‚úó',
      clinicalData: reportData.clinicalData ? '‚úì' : '‚úó',
      questionsData: reportData.questionsData ? '‚úì' : '‚úó',
      diagnosisData: reportData.diagnosisData ? '‚úì' : '‚úó',
      patientDataFormat: reportData.patientData ? {
        nom: reportData.patientData.nom,
        prenom: reportData.patientData.prenom,
        sexe: reportData.patientData.sexe
      } : 'N/A'
    })
    
    // 3. Appeler l'API
    const response = await fetch('/api/generate-consultation-report', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(reportData),
    })
    
    console.log('üì® R√©ponse API re√ßue:', response.status)
    
    // 4. Traiter la r√©ponse
    const result = await response.json()
    
    if (!response.ok) {
      console.error('‚ùå Erreur API:', result)
      return {
        success: false,
        error: result.error || `Erreur HTTP: ${response.status}`,
        errorDetails: result.details || result
      }
    }
    
    console.log('‚úÖ Rapport g√©n√©r√© avec succ√®s')
    console.log('üìä Statistiques:', result.statistics)
    
    return {
      success: true,
      report: result.report,
      documents: result.documents
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du rapport:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      errorDetails: error
    }
  }
}

/**
 * Fonction de test pour v√©rifier que les donn√©es sont correctement format√©es
 */
export async function testDataFormat(): Promise<void> {
  try {
    const allData = await consultationDataService.getAllData()
    const reportData = await consultationDataService.getDataForReportGeneration()
    
    console.log('=== TEST FORMAT DES DONN√âES ===')
    console.log('1. Donn√©es originales (patientData):', allData?.patientData)
    console.log('2. Donn√©es transform√©es (patientDataAPI):', allData?.patientDataAPI)
    console.log('3. Donn√©es pour le rapport:', reportData.patientData)
    console.log('4. Validation:', consultationDataService.validateDataForReport(reportData))
    console.log('===============================')
  } catch (error) {
    console.error('Erreur test format:', error)
  }
}

/**
 * Fonction pour r√©essayer la g√©n√©ration du rapport en cas d'√©chec
 */
export async function retryGenerateReport(maxRetries: number = 3): Promise<ReportGenerationResult> {
  let lastError: any = null
  
  for (let i = 0; i < maxRetries; i++) {
    console.log(`üîÑ Tentative ${i + 1}/${maxRetries}...`)
    
    const result = await generateMedicalReport()
    if (result.success) {
      return result
    }
    
    lastError = result.error
    console.log(`‚è≥ Attente avant nouvelle tentative...`)
    await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1))) // Attente progressive
  }
  
  return {
    success: false,
    error: `√âchec apr√®s ${maxRetries} tentatives. Derni√®re erreur: ${lastError}`
  }
}

/**
 * Fonction pour v√©rifier l'√©tat de l'API
 */
export async function checkAPIStatus(): Promise<boolean> {
  try {
    const response = await fetch('/api/generate-consultation-report', {
      method: 'GET'
    })
    
    if (response.ok) {
      const status = await response.json()
      console.log('üìä √âtat de l\'API:', status)
      return true
    }
    
    return false
  } catch (error) {
    console.error('‚ùå API inaccessible:', error)
    return false
  }
}

/**
 * Fonction pour r√©cup√©rer uniquement les donn√©es patient format√©es pour l'API
 */
export async function getPatientDataForAPI() {
  const data = await consultationDataService.getPatientDataForAPI()
  if (!data) {
    // Si pas de donn√©es API, transformer les donn√©es du formulaire
    const allData = await consultationDataService.getAllData()
    if (allData?.patientData) {
      return consultationDataService.transformPatientDataForAPI(allData.patientData)
    }
  }
  return data
}

// Export des types utiles
export type { PatientDataAPI } from './consultation-data-service'
